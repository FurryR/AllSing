class _2189
{
	static _2161(_2056)
	{
		let _987;
		_987=0;
		for(let _754=0;_754<_2056.length;_754++)
		{
			let _333;
			_333=_2056[_754];
			if (_333._2317._2319)
				_987++;
		}
		return _987;
	}
	static _2394(_2056,_2283)
	{
		let _2395;
		_2395=0;
		let _2396;
		_2396=-1;
		for(let _754=0;_754<_2056.length;_754++)
		{
			let _333;
			_333=_2056[_754];
			if (_333._2317._2319)
			{
				if(_2395==_2283)
				{
					let _2397=new Object();
					_2397._2299=_2396+1;
					_2397._1192=_754;
					return _2397;
				}
				_2396=_754;
				_2395++;
			}
		}
		return null;
	}
	static _2284(_2056, _2283)
	{
		let _2394;
		_2394 = this._2394(_2056, _2283);
		if (_2394===null)
			return null;
		return [_2394._2299, _2394._1192];
	}
	static _2398(_987,_2056)
	{
		let _2399;
		_2399=_2056._803()-1;
		if(_987._2299<0)
			_987._2299=0;
		if(_987._1192<0)
			_987._1192=0;
		if(_987._2299>_2399)
			_987._2299=_2399;
		if(_987._1192>_2399)
			_987._1192=_2399;
	}
	static _2053(_2056)
	{
		return _2056.length;
	}
	static _1656(_2056,_1656)
	{
		return _1656;
	}
	static _2062(_2056,_1656)
	{
		return _2056[_2189._1656(_2056,_1656)];
	}
	static _2400(_2056,_1656)
	{
		return _2056.length-1-_1656;
	}
	static _2278(_2056,_1656)
	{
		return _2056[_2189._2400(_2056,_1656)];
	}
	static _2401(_2055)
	{
		let _987;
		_987=0;
		for(let _754=0;_754<_2055.length;_754++)
		{
			let _2056;
			_2056=_2055[_754];
			if(_754==0||_2056._1138._1139)
				_987++;
		}
		return _987;
	}
	static _2402(_2055,_2403)
	{
		let _2404;
		_2404=-1;
		let _2405;
		_2405=-1;
		for(let _754=0;_754<_2055.length;_754++)
		{
			let _2056;
			_2056=_2055[_754];
			if(_754==0||_2056._1138._1139)
			{
				if(_2404==_2403)
					return [_2405, _754 - 1];
				_2405=_754;
				_2404++;
			}
		}
		if(_2404==_2403)
			return [_2405, _2055.length - 1];
		return null;
	}

	static _2406(_2055, _445)
	{
		let _987;
		_987 = -1;
		for (let _754 = 0; _754 < _2055.length; _754++)
		{
			let _992 = _2055[_754];
			if (_992._1138._1139)
			{
				if (_992._1138._1921)
					_987 = 0;
				else
					_987 = -1;
			}
			else
			{
				if (_987 != -1)
					_987++;
			}
			if (_445 == _992)
				return _987;
		}
		return -1;
	}
	static _1880(_2055,_1983)
	{
		let _2407;
		_2407 = this._2406(_2055, _2055[_1983]);
		if (_2407 == -1)
			return false;
		return true;
	}

	static _2160(_2056,_1656)
	{
		let _2161;
		_2161=_2189._2161(_2056);
		for(let _2283=0;_2283<_2161;_2283++)
		{
			let _2408;
			_2408=_2189._2394(_2056,_2283);
			if(_2408._2299<=_1656&&_1656<=_2408._1192)
				return _2283;
		}
		return -1;
	}

	static _2286(_2056,_2283)
	{
		let _2409, _2410;
		[_2409, _2410] = this._2284(_2056, _2283);
		let _2411;
		_2411 = this._2062(_2056,_2410);
		let _2412;
		_2412 = _2411._2317;
		return _2412;
	}

	static _2190(_839,_2188, _1607)
	{
		_839._2325 = _2188;
		_839._2326 = _1607;
		_839._2322.length = 0;
	}
	static _2192(_839, _1508)
	{
		_839._2325 += _1508;
		for (let _570 = 0; _570 < _839._2322.length; _570++)
			_839._2322[_570]._1634 += _1508;
	}
	static _2195(_839, _2194)
	{
		let _1508;
		_1508 = _2194 - _839._2325;
		_839._2191(_1508);
	}
	static _2197(_839, _2196)
	{
		let _2413;
		_2413 = _839._2298();
		let _2414;
		_2414 = _2196 / _2413;
		_839._2320 *= _2414;
		_839._2326 *= _2414;
		_839._2324 *= _2414;
		for (let _570 = 0; _570 < _839.length; _570++)
			_839._2322[_570]._1635 *= _2414;
	}
	static _2265(_839)
	{
		return [this._2267(_839), this._2268(_839)];
	}
	static _2267(_839)
	{
		let _2188;
		_2188 = _839._2325 * _839._2326;
		let _1607;
		_1607 = _839._2326;
		let _2415;
		_2415 = _839._2322.length;
		for (let _2416 = 0; _2416 < _2415; _2416++)
		{
			let _455;
			_455 = _839._2322[_2416];
			_2188 += _455._1634 * _455._1635;
			_1607 += _455._1635;
		}
		_2188 /= _1607;
		return _2188;
	}
	static _2268(_839)
	{
		let _1607;
		_1607 = _839._2326;
		let _2415;
		_2415 = _839._2322.length;
		for (let _2416 = 0; _2416 < _2415; _2416++)
		{
			let _455;
			_455 = _839._2322[_2416];
			_1607 += _455._1635;
		}
		return _1607;
	}

	static _2201(_839, _2200)
	{
		_839._2326 -= _839._2417;
		_839._2326 += _2200;
		_839._2315 = false;
		_839._2417 = _2200;
	}
	static _2203(_839, _2200)
	{
		_839._2326 -= _839._2418;
		_839._2326 += _2200;
		_839._2316 = false;
		_839._2418 = _2200;
	}
	static _2206(_839, _2205)
	{
		_839._2315 = false;
		_839._2417 = _839._2419() * _2205;
	}
	static _2208(_839, _2205)
	{
		_839._2316 = false;
		_839._2418 = _839._2419() * _2205;
	}
	static _2212(_839, _2211)
	{
		_839._2315 = false;
		_839._2420 *= _839._2209;
		_839._2209 = _2211;
		_839._2420 /= _2211;
	}
	static _2215(_839, _2211)
	{
		_839._2316 = false;
		_839._2421 *= _839._2213;
		_839._2213 = _2211;
		_839._2421 /= _2211;
	}
	static _2217(_839)
	{
		return 1 + _839._2322.length;
	}
	static _2220(_839, _2219)
	{
		let _2422 = _839._2322;
		let _2423, _2424;
		_2423 = _2422.length;
		_2424 = _2219 - 1;
		if (_2424 == _2423)
			return;
		if (_2424 < _2423)
		{
			_2422.length = _2424;
			return;
		}
		for (let _754 = _2423; _754 < _2424; _754++)
			_2422[_754] = _2425();
	}
	static _2224(_839, _754, _2222, _2223)
	{
		if (_754 == 0)
		{
			_839._2183._2167 = _2222;
			_839._2183._2168 = _2223;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2167 = _2222;
			_455._2168 = _2223;
		}
	}
	static _2226(_839, _754, _2222)
	{
		if (_754 == 0)
		{
			_839._2183._2167 = _2222;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2167 = _2222;
		}
	}
	static _2228(_839, _754, _2223)
	{
		if (_754 == 0)
		{
			_839._2183._2168 = _2223;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2168 = _2223;
		}
	}
	static _2230(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2183._2167;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._2167;
		}
	}
	static _2232(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2183._2168;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._2168;
		}
	}
	static _2235(_839, _754, _2234)
	{
		if (_754 == 0)
		{
			_839._2327 = _2234;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2426 = _2234;
		}
	}
	static _2238(_839, _754, _2237)
	{
		if (_754 == 0)
		{
			_839._2328 = _2237;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2427 = _2237;
		}
	}
	static _2240(_839, _754, _2234, _2237)
	{
		if (_754 == 0)
		{
			_839._2327 = _2234;
			_839._2328 = _2237;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._2426 = _2234;
			_455._2427 = _2237;
		}
	}


	static _2242(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2327;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._2426;
		}
	}
	static _2244(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2328;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._2427;
		}
	}
	static _2246(_839, _754)
	{
		if (_754 == 0)
		{
			return [_839._2327, _839._2328];
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return [_455._2426, _455._2427];
		}
	}



	static _2248(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2326;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._1635;
		}
	}
	static _2250(_839, _754, _1607)
	{
		if (_754 == 0)
		{
			_839._2326 = _1607;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._1635 = _1607;
		}
	}
	static _2252(_839, _754)
	{
		if (_754 == 0)
		{
			return _839._2325;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			return _455._1634;
		}
	}
	static _2254(_839, _754, _2188)
	{
		if (_754 == 0)
		{
			_839._2325 = _2188;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._1634 = _2188;
		}
	}
	static _2257(_839, _754, _2256)
	{
		if (_754 == 0)
		{
			_839._2325 += _2256;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._1634 += _2256;
		}
	}
	static _2259(_839, _754, _2188, _1607)
	{
		if (_754 == 0)
		{
			_839._2325 = _2188;
			_839._2326 = _1607;
		}
		else
		{
			let _455;
			_455 = _839._2322[_754 - 1];
			_455._1634 = _2188;
			_455._1635 = _1607;
		}
	}
	static _2264(_839, _2261, _2262, _2263)
	{
		_839._2258(_2261, _2262._2251(_2263), _2262._2247(_2263));
		_839._2221(_2261, _2262._2229(_2263), _2262._2231(_2263));
		_839._2239(_2261, _2262._2241(_2263), _2262._2243(_2263));
	}

	static _2428(_2056, _1656)
	{
		for (let _2429 = _1656; _2429 >= 0; _2429--)
		{
			let _2430;
			_2430 = _2056._2154(_2429);
			if (!_2430._2317._2319)
			{
				_2430._2191(4);
				_2430._2065(0.25);
				return null;
			}
		}
		return L("添花_高音 没有找到目标音节");
	}

	static _2431(_2055, _1983)
	{
		return _2055[_1983]._1138._1926;
	}
	static _2432(_2055, _1983)
	{
		if (_1983 - 1 < 0)
			return false;
		return _2055[_1983 - 1]._1138._1926;
	}

	static _2374(_2055, _1983)
	{
		let _270;
		_270 = _2055[_1983]._1138;
		let _2433;
		_2433 = _270._2434;
		if (_270._2040 != false)
		{
			_1938._2027(F("音高音量"));
			let _2001, _2002;
			[_2001, _2002] = _1938._1998(_2055, _2055[_1983]);
			let _2435, _2436;
			_2435 = 1e100;
			_2436 = -1e100;
			for (let _620 = _2001; _620 <= _2002; _620++)
			{
				let _445;
				_445 = _2055[_620];
				if (_445._1137)
					continue;
				let _270;
				_270 = _445._1138;
				let _2433;
				_2433 = _270._2434;
				if (_2433 < _2435)
					_2435 = _2433;
				if (_2433 > _2436)
					_2436 = _2433;
			}
			let _2437;
			_2437 = (_2436 + _2435)/2;
			let _2438;
			if (_2437 < 0.3)
				_2438 = 0.15;
			else if (_2437 < 0.4)
				_2438 = _2437 * 0.5;
			else
				_2438 = 0.2;
			let _2439;
			_2439 = _2436 - _2435;
			if (_2439 < _2438)
			{
				_2435 -= (_2438 - _2439) / 2;
				if (_2435 < 0)
					_2435 = 0;
				_2436 += (_2438 - _2439) / 2;
				if (_2436 > 1)
					_2436 = 1;
			}
			if (_270._2040 == F("小"))
				_2433 = _2435;
			else
				_2433 = _2436;
		}
		return _2433;
	}
}

