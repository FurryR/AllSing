
class _1571
{
    static _3244 = 0;
    static _3211 = 1;
    static _3212 = 2;
    static _3213 = 3;
    static _3214 = 4;
    static _3215 = 5;
    static _1558;
    static _1029()
    {
        _1571._1558 = new Map(_g英语单词映射数组);
    }
    static _3245(_313)
    {
        let _3246;
        _3246 = _g英语单词映射数组.concat(_313);
        _1571._1558 = new Map(_3246);
    }
    static _3247(_331)
    {
        
        _331=_331.replaceAll("(__phonetic_symbol_28a_)", "");
        
        _331 =_331.replaceAll("(__phonetic_symbol_259_)", "");

        _331=_331.replaceAll("ː", ":");
        _331=_331.replaceAll("u:", "u");
        _331=_331.replaceAll("i:", "i");
        _331=_331.replaceAll("__phonetic_symbol_254_:", "ɔ");
        _331=_331.replaceAll("__phonetic_symbol_251_:", "ɑ");
        _331 =_331.replaceAll(":", "");

        _331 =_331.replaceAll("ɹ", "r");
        _331 =_331.replaceAll("ɫ", "l");

        _331 =_331.replaceAll("ɝ", "ɜ");
        _331 =_331.replaceAll("ɚ", "ә");
        _331 =_331.replaceAll("(r)", "");


        _331 =_331.replaceAll("dz", "ʣ");
        _331 =_331.replaceAll("ts", "ʦ");
        _331 =_331.replaceAll("dʒ", "ʤ");
        _331 =_331.replaceAll("tʃ", "ʧ");

        _331 = _331.replaceAll("ɡ", "g");

        _331 = _331.replaceAll("e", "ɛ");
        _331 = _331.replaceAll("ɛi", "eɪ");
        _331 = _331.replaceAll("ɛɪ", "eɪ");
        
        
        
        
        
        return _331;
    }
    static _3248(_331)
    {
        _331 =_331.replaceAll("\'", "");
        _331 =_331.replaceAll("\"", "");
        _331 =_331.replaceAll("ˈ", "");
        _331 =_331.replaceAll(".", "");
        _331 =_331.replaceAll("ˌ", "");
        _331 = _331.replaceAll(",", "");
        return _331;
    }


    static _3249(_3250)
    {
        _3250 = this._3248(_3250);
        _3250 = this._3247(_3250);

        _3250 = _3250.replaceAll("", "");
        _3250 = _3250.replaceAll("", "");
        _3250 = _3250.replaceAll("", "");
        
        _3250 = _3250.replaceAll("tɹ̥ʷ", _1665._3251);
        _3250 = _3250.replaceAll("tr", _1665._3251);
        _3250 = _3250.replaceAll("dɹʷ", _1665._3252);
        _3250 = _3250.replaceAll("dr", _1665._3252);

        _3250 = _3250.replaceAll("r", _1665._3253);

        _3250 = _3250.replaceAll("p", _1665._3254);
        _3250 = _3250.replaceAll("t", _1665._3255);
        _3250 = _3250.replaceAll("k", _1665._3256);
        _3250 = _3250.replaceAll("ʦ", _1665._3257);
        _3250 = _3250.replaceAll("ʧ", _1665._3258);
        

        _3250 = _3250.replaceAll("b", "p");
        _3250 = _3250.replaceAll("d", "t");
        _3250 = _3250.replaceAll("g", "k");
        _3250 = _3250.replaceAll("ʣ", "ʦ");
        _3250 = _3250.replaceAll("ʤ", "ʧ");
        

        
        _3250 = _3250.replaceAll(_1665._3251, "tɹ̥ʷʰ");
        _3250 = _3250.replaceAll(_1665._3252, "tɹ̥ʷ");

        _3250 = _3250.replaceAll(_1665._3253, "ɹʷ");

        _3250 = _3250.replaceAll(_1665._3254, "pʰ");
        _3250 = _3250.replaceAll(_1665._3255, "tʰ");
        _3250 = _3250.replaceAll(_1665._3256, "kʰ");
        _3250 = _3250.replaceAll(_1665._3257, "ʦʰ");
        _3250 = _3250.replaceAll(_1665._3258, "ʧʰ");


        
        

        return _3250;
    }
    static _3259(_358)
    {
        _358._1623 = _358._1671 + _358._1672 + _358._1673 + _358._1674 + _358._1675;
        _358._1671 = _1571._3249(_358._1671);
        _358._1672 = _1571._3249(_358._1672);
        _358._1673 = _1571._3249(_358._1673);
        _358._1674 = _1571._3249(_358._1674);
        _358._1674 = _358._1674.replaceAll('l', 'ɫ');
        _358._1675 = _1571._3249(_358._1675);
        let _359;
        _359 = _358._2967;
        switch (_358._1673)
        {
            case "eɪ":
                _359._3087 = _2973._3089;
                _359._3130 = 1;
                _359._3131 = 0;
                _359._3132 = 0.3;
                break;
            case "ɔɪ":
            case "əʊ":
            case "aɪ":
            case "aʊ":
            case "ɪə":
            case "ʊə":
            case "ɛə":
                _359._3087 = _2973._3088;
                _359._3130 = 1;
                _359._3131 = 0;
                _359._3132 = 0.3;
                break;
        }
        
    }
    static _2985(_3260,_2056)
    {
        let _2941 = new Array();
        let _3261;
        _3261 = _2056.split(" ");
        for (let _3192 = 0; _3192 < _3261.length; _3192++)
        {
            let _3262;
            _3262 = _3261[_3192];
            let _3263 = new Array;
            if (_581._1220(_3262, ",") || _581._1220(_3262, "."))
            {
                _3263.length = 2;
                _3263[0] = _581._1221(_3262, _3262.length - 1);
                _3263[1] = _581._1344(_3262, 1);
            }
            else
            {
                _3263.length = 1;
                _3263[0] = _3262;
            }
            for (let _3192 = 0; _3192 < _3263.length; _3192++)
            {
                let _1594;
                _1594 = _3263[_3192];
                if (_3262.length == 0)
                    continue;
                if (_1594 == ',' || _1594 == '.')
                {
                    let _333;
                    _333 = new _2944();
                    _333._1640 = _1594;
                    _333._1642 = _1594;
                    _333._1622 = true;
                    _2941.push(_333);
                    continue;
                }
                let _2133;
                _2133 = _1571._1558.get(_1594);
                if (!_2133)
                {
                    _2133 = _1571._1558.get(_1594.toLowerCase());
                    if (!_2133)
                        continue;
                }
                let _3264;
                _3264 = 0;
                for (let _1656 = 0; _1656 < _2133.length; _1656++)
                {
                    let _2262;
                    _2262 = _2133[_1656];
                    let _2061;
                    _2061 = new _2944();
                    _2941.push(_2061);
                    _2061._1671 = _2262[_1571._3211];
                    _2061._1672 = _2262[_1571._3212];
                    _2061._1673 = _2262[_1571._3213];
                    _2061._1674 = _2262[_1571._3214];
                    _2061._1675 = _2262[_1571._3215];
                    let _3265 = _2262[_1571._3244].length;
                    _2061._1640 = _1594.substr(_3264, _3265);
                    _3264 += _3265;

                    _2061._1642 = _1594;
                    _2061._1643 = _1656;
                    _2061._2955 = (_1656 == _2133.length - 1);

                    _1571._3259(_2061);
                }
            }
        }

        
        for (let _754 = 1; _754 < _2941.length; _754++)
        {
            let _3266, _3267;
            _3266 = _2941[_754 - 1];
            _3267 = _2941[_754];
            if (_3266._1622)
                continue;
            if (_3267._1622)
                continue;
            let _3268, _3269, _3270, _3271, _3272;
            [_3268, _3269, _3270, _3271, _3272] = _3266._3273(false);
            let _3274, _3275, _3276, _3277, _3278;
            [_3274, _3275, _3276, _3277, _3278] = _3267._3273(false);
            do
            {
                if (!_3272)
                    break;
                if (_3274)
                    break;
                if (_3275)
                    break;
                if ((!_3276) && (!_3277))
                    break;
                _3266._3279 = true;
                _3266._3280 = true;
                _3266._3281 = false;
                _3266._3282 = true;
                _3267._3283 = true;
                _3267._3284 = true;
                _3267._3285 = _581._1344(_3272, 1);
                _3272 = _581._1221(_3272, _3272.length - 1);
                _3275 = _3267._3285 + _3275;
            }
            while (false);
        }
        for (let _754 = 0; _754 < _2941.length; _754++)
        {
            let _358;
            _358 = _2941[_754];
            let _3211, _3212, _3213, _3214, _3215;
            [_3211, _3212, _3213, _3214, _3215] = _358._3273(false);
            do
            {
                if (!_3215)
                    break;
                _358._3286 = true;
                if (!(_358._3279 && _358._3280))
                {
                    _358._3281 = true;
                    _358._3282 = false;
                    _358._3280 = false;
                }
            }
            while (false);
            do
            {
                if (!_3211)
                    break;
                _358._3287 = true;
                _358._3288 = true;
            }
            while (false);
        }
        

        _3260.push(..._2941);
    }
}
function _3196(_313)
{
    _1571._3245(_313);
}
_1571._1029();

