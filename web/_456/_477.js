class _7307
{
    
    
    
    static _7308 = _1892._7183;
    _7338;
    _6336;
    _7339;
    _6322;
    _7340;
    _7341 = new Array();
}
class _7292 extends _7155
{
    static _7156 = L("声带振动提取");
    static _7157 = L("从录音中提取的声带振动。");
    _7342 = "unkown";
    _7314 = new Array();
    _7299 = new Array();
    _7313 = 16000;
    _7343 = _7292._7344; 
    static _7344 = F('{"最小值y": 0, "最大值y": 1, "只能为正": true, "控制点数组":[]}');
    static _7345 = [L("去噪音"), L("不变")];
    static _7346 = L("整形");
    static _7347 = L("某些音频质量不高，再加上共振峰滤波，其中的某些N倍频可能噪音比较大。提取的声带音，可以整形，去掉噪音。");
    constructor()
    {
        super();
        super._7159 = F("攫取");
    }
    _1893()
    {
        let _3150 = new _1209();
        _3150._1235();
        function _7348(_7150)
        {
            _3150._1252()           
            _3150._1242(F("开始采样点索引"),_7150._7338);
            _3150._1244(F("开始频率"),_7150._6336);
            _3150._1242(F("结束采样点索引"),_7150._7339);
            _3150._1244(F("结束频率"),_7150._6322);
            _3150._1242(F("当前倍数"), _7150._7340);
            _3150._1254(F("倍频有效"),false);
            for (let _754 = 0; _754 < _7150._7341.length; _754++)
                _3150._1241(_7150._7341[_754]);
            _3150._1255(F("倍频有效"));
            _3150._1253();
        }
        _3150.String(F("来源"),this._7342);
        _3150._1242(F("采样频率"),this._7313);
        _3150._1254(F("时域采样"),false);
        for (let _754 = 0; _754 < this._7299.length; _754++)
            _3150._1244(this._7299[_754]);
        _3150._1255(F("时域采样"));
        _3150._1254(F("N倍频数组"))
        for (let _754 = 0; _754 < this._7314.length; _754++)
            _7348(this._7314[_754]);
        _3150._1255(F("N倍频数组"));
        _3150.String(F("厚度方式"), this._7161);
        _3150._1244(F("全频段厚度"),this._7162);
        _3150._1247(F("不同频段厚度"),this._7163);
        _3150._1247(F("整形"),this._7343);
        return _3150._1260();
    }
    _7151(_893)
    {
        if (parent._3151)
        {

            let _6271;
            _6271 = _893;

            let _7164;
            _7164 = _6271;
            let _7160 = new _804();
            _7160._807(_7164, "read_from_file");

            function _7349(_7150, _6271)
            {
                let _7160 = new _804();
                _7160._807(_6271, "read_from_file");
                let _7291;
                if (_7291 = _7160._813(F("开始采样点索引")))
                    _7150._7338 = _7291._789();
                if (_7291 = _7160._813(F("开始频率")))
                    _7150._6336 = _7291._791();
                if (_7291 = _7160._813(F("结束采样点索引")))
                    _7150._7339 = _7291._789();
                if (_7291 = _7160._813(F("结束频率")))
                    _7150._6322 = _7291._791();
                if (_7291 = _7160._813(F("当前倍数")))
                    _7150._7340 = _7291._789();
                if (_7291 = _7160._813(F("倍频有效")))
                {
                    _7150._7341.length = _7291._789();
                    for (let _754 = 0; _754 < _7150._7341.length; _754++)
                        _7150._7341[_754] = _7291._788();
                }
            }

            if (_6271 = _7160._813(F("来源")))
                this._7342 = _6271._792();
            if (_6271 = _7160._813(F("采样频率")))
                this._7313 = _6271._789();
            if (_6271 = _7160._813(F("时域采样")))
            {
                if (this._7299 == null)
                    this._7299 = new Array();
                this._7299.length = _6271._789();
                for (let _754 = 0; _754 < this._7299.length; _754++)
                    this._7299[_754] = _6271._791();
            }
            if (_6271 = _7160._813(F("N倍频数组长度")))
            {
                this._7314.length = _6271._789();
                for (let _754 = 0; _754 < this._7314.length; _754++)
                {
                    let _7291;
                    if (_7291 = _7160._813(F("N倍频数组") + _754))
                    {
                        this._7314[_754] = new _7307();
                        _7349(this._7314[_754], _7291);
                    }
                }
            }
            if (_6271 = _7160._813(F("厚度方式")))
                this._7161 = _6271._792();
            if (_6271 = _7160._813(F("全频段厚度")))
                this._7162 = _6271._791();
            if (_6271 = _7160._813(F("不同频段厚度")))
                this._7163 = _6271._792();
            if (_6271 = _7160._813(F("整形")))
                this._7343 = _6271._792();
            _6271 = _7164;
        }
        else
        {
            let _1580 = new _1261();
            _1580._1264(_893);
            let _623;
            function _7350(_754)
            {
                if (!_1580._1252(_754))
                    return null;
                let _7150;
                _7150 = new _7307();
                let _623;
                if ((_623 = _1580._1242(F("开始采样点索引"))) !== undefined)
                    _7150._7338 = _623;
                if ((_623 = _1580._1244(F("开始频率"))) !== undefined)
                    _7150._6336 = _623;
                if ((_623 = _1580._1242(F("结束采样点索引"))) !== undefined)
                    _7150._7339 = _623;
                if ((_623 = _1580._1244(F("结束频率"))) !== undefined)
                    _7150._6322 = _623;
                if ((_623 = _1580._1242(F("当前倍数"))) !== undefined)
                    _7150._7340 = _623;
                if ((_623 = _1580._1254(F("倍频有效"))) !== undefined)
                {
                    _7150._7341.length = _1580._1266();
                    for (let _754 = 0; _754 < _7150._7341.length; _754++)
                        _7150._7341[_754] = _1580._1241(_754);
                    _1580._1255(F("倍频有效"));
                }
                _1580._1253(_754);
                return _7150;
            }
            if ((_623 = _1580.String(F("来源"))) !== undefined)
                this._7342 = _623;
            if ((_623 = _1580._1242(F("采样频率"))) !== undefined)
                this._7313 = _623;
            if ((_623 = _1580._1254(F("时域采样"))) !== undefined)
            {
                if (this._7299 == null)
                    this._7299 = new Array();
                this._7299.length = _1580._1266();
                for (let _754 = 0; _754 < this._7299.length; _754++)
                    this._7299[_754] = _1580._1244(_754);
                _1580._1255(F("时域采样"));
            }
            if ((_623 = _1580._1254(F("N倍频数组"))) !== undefined)
            {
                this._7314.length = _1580._1266();
                for (let _754 = 0; _754 < this._7314.length; _754++)
                    this._7314[_754] = _7350(_754);
                _1580._1255(F("N倍频数组"));
            }
            if ((_623 = _1580.String(F("厚度方式"))) !== undefined)
                this._7161 = _623;
            if ((_623 = _1580._1244(F("全频段厚度"))) !== undefined)
                this._7162 = _623;
            if ((_623 = _1580._1247(F("不同频段厚度"))) !== undefined)
                this._7163 = _623;
            if ((_623 = _1580._1247(F("整形"))) !== undefined)
                this._7343 = _623;
        }
    }
    _7165()
    {
        if (this._7314.length == 0)
            return 220;
        let _987;
        _987 = 20000;
        function _1290(_518)
        {
            if (_518 < _987)
                _987 = _518;
        }
        for (let _754 = 0; _754 < this._7314.length; _754++)
        {
            let _7150 = this._7314[_754];
            _1290(_7150._6336 / _7150._7340);
            _1290(_7150._6322 / _7150._7340);
        }
        return _987 * _929._6338 / _7313;
    }
}

