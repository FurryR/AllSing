
var _7300 = 1 << 11;
var _7388 = new Array(_7300);
{
    for (let _1279 = 0; _1279 < _7300; _1279++)
        _7388[_1279] = 0.5 - 0.5 * Math.cos(Math.PI * 2.0 * _1279 / (_7300 - 1));
}
function _7389(x)
{
    return ((x & (x - 1)) == 0) && (x > 0);
}
function _7390(value, _7391)
{
    let _7392 = Math.floor(Math.log(_7391) / Math.log(2));
    let _7393 = value;
    let _529 = _7392 - 1;
    value >>= 1;
    while (value > 0)
    {
        _7393 = (_7393 << 1) | (value & 1);
        _529 -= 1;
        value >>= 1;
    }
    return (_7393 << _529) & ((1 << _7392) - 1);
}
function _7394(_7395)
{
    if (!_7389(_7395.length))
        console.assert(0);

    let buffer;
    buffer = new Array();
    buffer.length = _7395.length;
    for (let _1279 = 0; _1279 < buffer.length; _1279++)
        buffer[_1279] = new Array(_7395[_1279], 0);

    for (let _1279 = 1; _1279 < buffer.length; _1279++)
    {
        let _1280 = _7390(_1279, buffer.length);
        if (_1280 > _1279)
        {
            let _1458;
            _1458 = buffer[_1280];
            buffer[_1280] = buffer[_1279];
            buffer[_1279] = _1458;
        }
    }

    let _7396;
    _7396 = Math.floor(buffer.length / 2);
    for (let _1279 = 1; _1279 <= _7396; _1279 *= 2)
    {
        let _7397 = -Math.PI / _1279;
        for (let _1280 = 0; _1280 < buffer.length; _1280 += (_1279 * 2))
        {
            for (let _1285 = 0; _1285 < _1279; _1285++)
            {
                let _7398 = _1280 + _1285;
                let _7399 = _1280 + _1285 + _1279;
                let _553, _552;
                _553 = Math.cos(_7397 * _1285);
                _552 = Math.sin(_7397 * _1285);
                let _555, _554;
                _555 = buffer[_7399][0];
                _554 = buffer[_7399][1];
                let _7400, _7401;
                _7400 = _553 * _555 - _552 * _554;
                _7401 = _553 * _554 + _552 * _555;
                buffer[_7399][0] = buffer[_7398][0] - _7400;
                buffer[_7399][1] = buffer[_7398][1] - _7401;
                buffer[_7398][0] += _7400;
                buffer[_7398][1] += _7401;
            }
        }
    }

    for (let _1279 = 0; _1279 < buffer.length; _1279++)
    {
        let _7400 = buffer[_1279][0];
        let _7401 = buffer[_1279][1];
        _7395[_1279] = Math.pow(Math.pow(_7400, 2) + Math.pow(_7401, 2), 0.5);
        _7395[_1279] /= _7395.length;
    }
}
function _7319()
{
    let _7315, _7325;
    _7315 = parseInt(_486.style.width);
    _7325 = parseInt(_486.style.height);
    _486.width = _7315;
    _486.height = _7325;
    let _7402 = _486.getContext('2d');
    let _7403 = _7402.getImageData(0, 0, _7315, _7325);
    let _7404 = _7403.data;
    _7402.putImageData(_7403, 0, 0);
}
function _7323(_7320, _7321, _7322)
{
    
    let _7315, _7325;
    _7315 = parseInt(_486.style.width);
    _7325 = parseInt(_486.style.height);
    _486.width = _7315;
    _486.height = _7325;
    let _7402 = _486.getContext('2d');
    let _7403 = _7402.getImageData(0, 0, _7315, _7325);
    let _7404 = _7403.data;

    let _7405, _7406;
    _7405 = _485.value;
    _7406 = _485._1457;

    let _7407 = [0.1, 1, 10, 100, 1000, 10000];
    let _7408;
    _7408 = _482.value;
    for (let _979 = 1; _979 < _7407.length; _979++)
    {
        let _1370;
        _1370 = _979 - 1;
        let _7409, _7410;
        _7409 = _1370 / (_7407.length - 1);
        _7410 = _979 / (_7407.length - 1);
        if (!(_7409 <= _7408 && _7408 <= _7410))
            continue;
        let _1371, _1372;
        _1371 = _7407[_1370];
        _1372 = _7407[_979];
        _7408 = _581._761(_1371, _1372, _7409, _7410, _7408);
        break;
    }

    let _7411 = new Array(_7300);
    for (let x = 0; x < _7315; x++)
    {
        let _7412;
        _7412 = Math.round(_581._761(_7320, _7321, 0, _7315 - 1, x));
        let _7413, _7414;
        _7413 = _7412 - _7300 / 2;
        _7414 = _7412 + _7300 / 2 - 1;
        for (let _7332 = _7413; _7332 <= _7414; _7332++)
        {
            let _7415;
            if (_7332 < 0 || _7332 >= _7298._7299.length)
                _7415 = 0;
            else
                _7415 = _7298._7299[_7332];

            let _7416;
            _7416 = _7388[_7332 - _7413];
            _7411[_7332 - _7413] = _7415 * _7416;
        }
        _7394(_7411);
        for (let y = 0; y < _7325; y++)
        {
            _754 = Math.round(_581._761(_7405, _7406, 0, _7325 - 1, y));
            let _623;
            if (_754 > _7300 / 2)
                _623 = 0;
            else
                _623 = _7411[_754];
            _623 *= _7408;
            if (_623 > 1)
                _623 = 1;
            let _1365, _1366, _1367, _1368;
            {
    		    const _1362 =
				    [
					    
					    
					    [255, 255, 0,   100, 0],  
					    [255, 255, 255, 100, 0],  
					    [255, 0,   0,   255, 255],
					    [0,   255, 255, 255, 255] 
				    ];
                [_1365, _1366, _1367, _1368] = _581._1361(_1362, _623);
            }
            let _7417;
            _7417 = (_7325 - y - 1) * _7315;
            _7417 += x;
            _7417 *= 4;
            _7404[_7417] = _1365;
            _7404[_7417 + 1] = _1366;
            _7404[_7417 + 2] = _1367;
            _7404[_7417 + 3] = _1368;
        }
    }
    _7402.putImageData(_7403, 0, 0);
}

