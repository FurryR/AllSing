





























































class _1011
{
	static _6802(_6263, _6706)
	{
		_6263.length = _6706.length;
		for (let _754 = 0; _754 < _6263.length; _754++)
		{
			let _1609 = new _1633();
			_6263[_754] = _1609;
			_1609._2314(_6706[_754]);
		}
	}
	static _6803(_6706)
	{
		let _6263;
		_6263 = new Array();
		_1011._6235(_6263, _6706);
		return _6263;
	}
	static _6235(_6263, _6706)
	{
		if (!_6706)
			return this._6803(_6263);
		else
			this._6802(_6263, _6706);
	}
	
	
	
	
	static _6701(_1630, _6191, _6804, _6805, _6806, _6807)
	{
		for (let _1578 = 0; _1578 < _1630.length; _1578++)
			_1630[_1578]._6808 = false;
		for (let _1578 = 0; _1578 < _6191.length; _1578++)
			_6191[_1578]._6808 = false;

		for (let _1015 = 0; _1015 < _6191.length; _1015++)
		{
			let _1631;
			_1631 = _6191[_1015];
			if (_1631._1637)
				continue;
			for (let _978 = 0; _978 < _1630.length; _978++)
			{
				let _1632;
				_1632 = _1630[_978];
				if (_1632._1637)
					continue;
				if (_1631._1621._5575(_1632._1621))
				{
					let _6809 = new Array();
					_6809.push(_1632);
					_1632._6808 = true;
					for (let _6810 = 1; true; _6810++)
					{
						let _6811;
						let _6812;
						_6812 = _978 + _6810;
						if (_6812 >= _1630.length)
							break;
						_6811 = _1630[_6812];
						if (!_6811._1637)
							break;
						_6811._6808 = true;
						_6809.push(_6811);
					}
					let _6813 = new Array();
					_6813.push(_1631);
					_1631._6808 = true;
					for (let _6810 = 1; true; _6810++)
					{
						let _6814;
						let _6815;
						_6815 = _1015 + _6810;
						if (_6815 >= _6191.length)
							break;
						_6814 = _6191[_6815];
						if (!_6814._1637)
							break;
						_6814._6808 = true;
						_6813.push(_6814);
					}
					if (_6804)
						_6804(_6809, _6813);
				}
			}
		}

		{
			let _1015 = -1;
			let _978 = -1;
			while (true)
			{
				let _1632;
				_1632 = null;
				for (_978++; _978 < _1630.length; _978++)
				{
					_1632 = _1630[_978];
					if (!_1632._6808)
						break;
				}
				if (_978 >= _1630.length)
					_1632 = null;
				let _1631;
				_1631 = null;
				for (_1015++; _1015 < _6191.length; _1015++)
				{
					_1631 = _6191[_1015];
					if (!_1631._6808)
						break;
				}
				if (_1015 >= _6191.length)
					_1631 = null;
				if (_1632 == null && _1631 == null)
					break;
				else if (_1632 != null && _1631 != null)
				{
					_6805(_1632, _1631);
					_1632._6808 = true;
					_1631._6808 = true;
				}
				else if (_1632)
				{
					if (_6806)
						_6806(_1632);
					_1632._6808 = true;
				}
				else
				{
					if (_6807)
						_6807(_1631);
					_1631._6808 = true;
				}
			}
		}
		for (let _1578 = 0; _1578 < _1630.length; _1578++)
			delete _1630[_1578]._6808;
		for (let _1578 = 0; _1578 < _6191.length; _1578++)
			delete _6191[_1578]._6808;
	}
	static _6816(_6817)
	{
		
		if ((0x2e80 <= _6817 && _6817 <= 0xa4cf) ||
			(0xf900 <= _6817 && _6817 <= 0xfaff) ||
			(0xfe30 <= _6817 && _6817 <= 0xfe4f))
			return false;
		return true;
	}
	static _6818(_5391)
	{
		if (_5391.length == 0)
			return true;
		return _1011._6816(_5391.charCodeAt(_5391.length - 1))
	}
	static _6819(_1579)
	{
		for (let _754 = 0; _754 < _585.length; _754++)
			if (_585[_754]._896() == _1579)
				return _754;
		return -1;
	}
	static _6820(_2133, _754, _5345)
	{
		let _303;
		_303 = _2133[_754]._1657;
		
		
		if (_5345 == "_1351")
		{
			if (_754 + 1 >= _2133.length)
				return false;
			let _6821;
			_6821 = _2133[_754 + 1]._1657;
			
			
			if (_1665._4848(_6821))
				return false;
			if (_1665._4851(_303))
				return false;
			return true;
		}
		else
		{
			if (_754 - 1 < 0)
				return false;
			let _6822;
			_6822 = _2133[_754 - 1]._1657;
			
			
			if (_1665._4851(_6822))
				return false;
			if (_1665._4848(_303))
				return false;
			return true;
		}
	}
	static _6049(_2133, _1656)
	{
		let _6823;
		_6823 = _1656 - 1;
		if (_6823 < 0)
			return false;
		let _6824 = _2133[_6823];
		return _6824._2316;
	}
	static _6051(_2133, _1656)
	{
		let _6825;
		_6825 = _1656 + 1;
		if (_6825 >= _2133.length)
			return false;
		let _5625 = _2133[_6825];
		return _5625._2315;
	}
	static _5812(_2133, _754, _5345)
	{
		let _6826, _6827;
		if (_5345 == "_1351")
		{
			if (_754 == _2133.length - 1)
				return false;
			_6826 = _2133[_754];
			_6827 = _2133[_754 + 1];
		}
		else
		{
			if (_754 == 0)
				return false;
			_6826 = _2133[_754 - 1];
			_6827 = _2133[_754];
		}
		let _2746;
		_2746 = (_6826._2324 || _6827._2320) ? true : false;
		let _6828;
		_6828 = _6827._2315;
		if (!_6828)
		{
			if (_6827._2417 == 0)
				_6828 = true;
		}
		let _6829;
		_6829 = (!_6826._2316) || (!_6828);
		if (_2746 || _6829)
			return false;
		return true;
	}
	static _5624(_2133, _754, _5345)
	{
		let _6826, _6827;
		if (_5345 == "_1351")
		{
			if (_754 == _2133.length - 1)
				return false;
			_6826 = _2133[_754];
			_6827 = _2133[_754 + 1];
		}
		else
		{
			if (_754 == 0)
				return false;
			_6826 = _2133[_754 - 1];
			_6827 = _2133[_754];
		}
		let _2746;
		_2746 = (_6826._2324 || _6827._2320) ? true : false;
		let _6829;
		_6829 = (!_6826._2316) || (!_6827._2315);
		if (_2746 || _6829)
			return false;
		return true;
	}
	static _5820(_2133, _754, _5345)
	{
		let _6826, _6827;
		if (_5345 == "_1351")
		{
			if (_754 == _2133.length - 1)
				return false;
			_6826 = _2133[_754];
			_6827 = _2133[_754 + 1];
		}
		else
		{
			if (_754 == 0)
				return false;
			_6826 = _2133[_754 - 1];
			_6827 = _2133[_754];
		}
		let _2746;
		_2746 = (_6826._2324 || _6827._2320) ? true : false;
		let _6830;
		_6830 = _1665._4851(_6826._1657) || _1665._4848(_6827._1657);
		let _6829;
		_6829 = (!_6826._2316) || (!_6827._2315);
		if (_2746 || _6830 || _6829)
			return false;
		return true;
	}
	static _6063(_2133, _1656)
	{
		let _6831;
		_6831 = _1665._5282(_2133, _1656);
		let _333 = _2133[_1656];
		let _6062;
		_6062 = _333._2419() - _333._2418 - _333._2421;
		_333._2417 = 0;
		_333._2420 = Math.min(_6831, _6062);
	}
	static _6040(_2133, _1656)
	{
		let _6831;
		_6831 = _1665._5283(_2133, _1656);
		let _333 = _2133[_1656];
		let _6039;
		_6039 = _333._2419() - _333._2417 - _333._2420;
		_333._2421 = Math.min(_6831, _6039);
		_333._2418 = 0;
	}
	static _6832(_2133, _1656)
	{
		let _333 = _2133[_1656];
		if ((!_333._2315) && (!_333._2316))
			return;
		if (_333._2315 && _333._2316)
		{
			let _6833, _6834;
			_6833 = _1665._5282(_2133, _1656);
			_6834 = _1665._5283(_2133, _1656);
			if (_6833 + _6834 <= _333._2419())
			{
				_333._2417 = 0;
				_333._2420 = _6833;
				_333._2421 = _6834;
				_333._2418 = 0;
			}
			else
			{
				_333._2417 = 0;
				_333._2420 = _6833 * _333._2419() / (_6833 + _6834);
				_333._2421 = _6834 * _333._2419() / (_6833 + _6834);
				_333._2418 = 0;
			}
			return;
		}
		if (_333._2315)
			_1011._6063(_2133, _1656);
		if (_333._2316)
			_1011._6040(_2133, _1656);
	}
	static _1655(_2133)
	{
		for (let _754 = 0; _754 < _2133.length; _754++)
			_1011._6832(_2133, _754);
	}
	static _2406(_2055, _445)
	{
		let _987;
		_987 = -1;
		for (let _754 = 0; _754 < _2055.length; _754++)
		{
			let _992 = _2055[_754];
			if (_992._1137)
				continue;
			if (_992._1138._1139 || _1011._1903(_2055, _754) == -1)
			{
				if (_992._1138._1921)
					_987 = 0;
				else
					_987 = -1;
			}
			else
			{
				if (_987 != -1)
					_987++;
			}
			if (_445 == _992)
				return _987;
		}
		return -1;
	}
	static _6835(_445)
	{
		return _1011._2406(_585, _445);
	}
	static _1915(_2055, _445)
	{
		let _2407;
		_2407 = _1011._2406(_2055, _445);
		if (_2407 == -1)
			return false;
		return true;
	}
	static _1880(_445)
	{
		return _1011._1915(_585, _445);
	}
	static _2505(_2055, _1981)
	{
		let _2502, _2503;
		[_2502, _2503] = _1011._2036(_2055, _1981);
		return _1011._1915(_2055, _2055[_2502]);
	}
	static _6836(_1981)
	{
		return _1011._2505(_585, _1981);
	}


	static _1966(_2055, _445)
	{
		let _6837 = _445._2285(_2055);
		let _987;
		_987 = -1;
		for (let _620 = 0; _620 < _2055.length; _620++)
		{
			let _992;
			_992 = _2055[_620];
			if (_992._1137)
				continue;
			if (_992._1138._1139 || _1011._1903(_2055, _620) ==-1)
				_987++;
			if (_620 >= _6837)
				return _987;
		}
		return _987;
	}
	static _6838(_445)
	{
		return _1011._1966(_585, _445);
	}
	static _2036(_2055, _6839)
	{
		let _2502, _2503;
		let _2404;
		_2404 = -1;
		for (let _620 = 0; _620 < _2055.length; _620++)
		{
			let _992;
			_992 = _2055[_620];
			if (_992._1137)
				continue;
			if (_992._1138._1139 || _1011._1903(_2055, _620) == -1)
			{
				_2404++;
				if (_6839 == _2404)
				{
					_2502 = _620;
				}
				if (_6839 + 1 == _2404)
				{
					return [_2502, _2503];;
				}
			}
			_2503 = _620;
		}
		return [_2502, _2503];
	}
	static _6840(_6839)
	{
		return _1011._2036(_585, _6839);
	}
	static _1920(_2055, _6841)
	{
		let _1981;
		_1981 = _1011._1966(_2055,_6841);
		let _6842, _6843;
		[_6842, _6843] = _1011._2036(_2055,_1981);
		return _2055[_6842];
	}
	static _6844(_6841)
	{
		return _1011._1920(_585, _6841);
	}
	static _1985(_2055)
	{
		let _2404;
		_2404 = 0;
		for (let _620 = 0; _620 < _2055.length; _620++)
		{
			let _992;
			_992 = _2055[_620];
			if (_992._1137)
				continue;
			if (_992._1138._1139 || _1011._1903(_2055, _620) == -1)
				_2404++;
		}
		return _2404;
	}
	static _6845()
	{
		return _1011._1985(_585);
	}

	static _1940(_270, _2028)
	{
		switch (_2028)
		{
			case F("音高音量"): return _270._2115; break;
			case F("上下行"): return _270._2112; break;
			case F("音节数"): return _270._6691; break;
		}
	}
	static _1943(_270, _2028)
	{
		switch (_2028)
		{
			case F("音高音量"): return _270._2040; break;
			case F("上下行"): return _270._2041; break;
			case F("音节数"): return _270._2042; break;
		}
	}
	static _1946(_270, _1945, _2028)
	{
		switch (_2028)
		{
			case F("音高音量"): _270._2115 = _1945; break;
			case F("上下行"): _270._2112 = _1945; break;
			case F("音节数"): _270._6691 = _1945; break;
		}
	}
	static _1949(_270, _1948, _2028)
	{
		switch (_2028)
		{
			case F("音高音量"): _270._2040 = _1948; break;
			case F("上下行"): _270._2041 = _1948; break;
			case F("音节数"): _270._2042 = _1948; break;
		}
	}
	static _1998(_1902, _445, _2028)
	{
		let _6837 = _445._2285(_1902);
		if (this._1943(_445._1138, _2028) == false)
			console.assert(0);
		let _2001;
		_2001 = _6837;
		if (!this._1940(_1902[_6837]._1138, _2028))
		{
			for (let _4859 = _6837 - 1; _4859 >= 0; _4859--)
			{
				let _2046;
				_2046 = _1902[_4859];
				if (_2046._1137)
					continue;
				let _6846;
				_6846 = _2046._1138;
				if (this._1943(_6846, _2028) == false)
					break;
				_2001 = _4859;
				if (this._1940(_6846, _2028))
					break;
			}
		}
		let _2002;
		_2002 = _6837;
		for (let _4859 = _6837 + 1; _4859 < _1902.length; _4859++)
		{
			let _2046;
			_2046 = _1902[_4859];
			if (_2046._1137)
				continue;
			let _6846;
			_6846 = _2046._1138;
			if (this._1943(_6846, _2028) == false)
				break;
			if (this._1940(_6846, _2028))
				break;
			_2002 = _4859;
		}
		return [_2001, _2002];
	}
	static _6847(_445, _2028)
	{
		return _1011._1998(_585, _445, _2028);
	}

	static _1803(_445)
	{
		if (_445._1164.length == 0)
			return true;
		if (_445._1137)
		{
			if (!_445._655._656)
				return false;
			if (!_445._662[0]._656)
				return false;
			if (!_445._663._656)
				return false;
			
			
			
			
		}
		else
		{
			if (!_445._655._656)
				return false;
			if (!_445._662[0]._656)
				return false;
			if (!_445._663._656)
				return false;
			if (!_445._664._656)
				return false;
			if (!_445._665._656)
				return false;
		}
		return true;
    }
	static _6490(_445)
	{
		return _1011._1012(_445, _74.value);
    }
	static _1012(_445,_969)
	{
		switch (_969)
		{
			case "vocal":
				if (_445._655._656)
					return true;
				if (_445._662[0]._656)
					return true;
				break;
			case "modification":
				if (_445._663._656)
					return true;
				break;
			case "beat":
				if (_445._664._656)
					return true;
				if (_445._665._656)
					return true;
				break;
			case "instrument":
				if (_445._663._656)
					return true;
				if (_445._664._656)
					return true;
				if (_445._665._656)
					return true;
				break;
			case "vocal and instrument":
				if (_445._655._656)
					return true;
				if (_445._662[0]._656)
					return true;
				if (_445._663._656)
					return true;
				if (_445._664._656)
					return true;
				if (_445._665._656)
					return true;
				break;
		}
		return false;
	}

	static _2162(_445)
	{
		let _1681;
		_1681 = _445._1164;
		let _2161;
		_2161 = 0;
		for (let _754 = 0; _754 < _1681.length; _754++)
		{
			let _455;
			_455 = _1681[_754];
			if (_455._1637)
				continue;
			let _270;
			_270 = _455._5992;
			if (_270._2319)
				_2161++;
		}
		return _2161;
	}

	static _1660(_445)
	{
		let _1681;
		_1681 = _445._1164;
		if (_1681.length)
		{
			let _6677;
			_6677 = _1681[0];
			_6677._2426 = 0;
			let _6667;
			_6667 = _1681[_1681.length - 1];
			_6667._2427 = 0;
		}
	}

	static _1661(_445)
	{
		let _1681;
		_1681 = _445._1164;
		for (let _1578 = _1681.length - 1; _1578 >= 0; _1578--)
		{
			let _455;
			_455 = _1681[_1578];
			if (!_455._1637)
			{
				let _270;
				_270 = _455._5992;
				_270._2319 = true;
				break;
			}
		}
		for (let _1578 = _1681.length - 1; _1578 >= 0; _1578--)
		{
			let _455;
			_455 = _1681[_1578];
			if (_455._5409())
			{
				for (_1578--; _1578 >= 0; _1578--)
				{
					let _455;
					_455 = _1681[_1578];
					if (!_455._1637)
					{
						let _270;
						_270 = _455._5992;
						_270._2319 = true;
						break;
					}
				}
			}
		}
	}	



	static _1903(_1902, _620)
	{
		for (let _4859 = _620 - 1; _4859 >= 0; _4859--)
		{
			let _2046;
			_2046 = _1902[_4859];
			if (!_2046._1137)
				return _4859;
		}
		return -1;
	}
	static _1905(_1902, _620)
	{
		for (let _4859 = _620 + 1; _4859 < _1902.length; _4859++)
		{
			let _2046;
			_2046 = _1902[_4859];
			if (!_2046._1137)
				return _4859;
		}
		return -1;
	}
	static _1961(_1902, _620)
	{
		let _6848;
		_6848 = 0;
		for (let _2005 = 0; _2005 < _1902.length; _2005++)
		{
			if (_2005 == _620)
				return _6848;
			let _445;
			_445 = _1902[_2005];
			if (!_445._1137)
				_6848++;
		}
		return -1;
	}
	static _2878(_1902, _445)
	{
		let _620;
		_620 = _445._2285(_1902);
		if (_1011._1903(_1902, _620) == -1)
			return true;
		return false;
	}
	static _2879(_1902, _445)
	{
		let _620;
		_620 = _445._2285(_1902);
		if (_1011._1905(_1902, _620) == -1)
			return true;
		return false;
	}



	static _6849(_445)
	{
		let _654 = new Array(_658._659);
		let _6850;
		_6850 = _445._662[0]._656;
		if (_6850 == null)
			return null;
		_654[0] = _6850;
		for (let _657 = 1; _657 < _658._659; _657++)
		{
			let _660;
			_660 = _445._662[_657];
			if (!_660)
				_654[_657] = null;
			else
				_654[_657] = _660._656;
		}

		let _6851 = new Array(_658._659);
		for (let _657 = 1; _657 < _658._659; _657++)
		{
			let _660;
			_660 = _654[_657];
			let _6852;
			if (_660 == null)
				_6852 = 0;
			_6852 = _660.length;
			let _6853;
			_6853 = _6851[_657] = new Array(_6852);
			_6853.fill(0);
		}
		let _145, _6854;
		_145 = _445._1158;
		_6854 = _929._6338;
		function _6855(_6856)
		{
			return _6854 * _6856 * 60 / _145;
		}
		let _2379 = _445._2346;
		for (let _2380 = 0; _2380 < _2379.length; _2380++)
		{
			let _429;
			_429 = _2379[_2380];
			let _3289;
			_3289 = _429._2354;
			let _6857 = "timbre_switch_";
			if (!_581._1250(_3289, _6857))
				continue;
			let _657;
			_657 = _581._1344(_3289, _3289.length - _6857.length);
			_657 = Number(_657);
			let _3060;
			_3060 = _6851[_657];
			let _6858, _6859;
			_6858 = _6855(_429._2355);
			_6859 = _6855(_429._2357);
			let _6860, _6861;
			_6860 = Math.max(0, Math.round(_6858));
			_6861 = Math.min(_3060.length - 1, Math.round(_6859));
			for (let _2005 = _6860; _2005 <= _6861; _2005++)
			{
				let _6856;
				_6856 = _581._761(_429._2355, _429._2357, _6858, _6859, _2005);
				_3060[_2005] = _429._5516(_6856);
			}
		}

		let _987;
		_987 = new _929();
		let _6862;
		_987._656 = _6862 = new Float64Array(_6850.length);
		let _6863;
		_6863 = new Array(_658._659);
		for (let _657 = 1; _657 < _658._659; _657++)
		{
			if (_445._1137)
				_6863[_657] = _445._1152[_657];
			else
				_6863[_657] = _445._1153[_657];
		}
		for (let _570 = 0; _570 < _6862.length; _570++)
		{
			let _6864;
			_6864 = new Array(_658._659);
			let _6865;
			_6865 = _6850[_570];
			_6864[0] = _6865;
			let _6866;
			_6866 = new Array(_658._659);
			for (let _657 = 1; _657 < _658._659; _657++)
			{
				let _660 = _654[_657];
				if (_660 && _570 < _660.length)
					_6864[_657] = _660[_570];
				else
					_6864[_657] = 0;
				let _6867 = _6863[_657];
				let _6868 = _6851[_657];
				if (_6867 && _570 < _6868.length)
					_6866[_657] = _6868[_570];
				else
					_6866[_657] = 0;
			}
			let _6869;
			_6869 = 0;
			for (let _657 = 1; _657 < _658._659; _657++)
				_6869 += _6866[_657];
			if (_6869 > 1)
			{
				for (let _657 = 1; _657 < _658._659; _657++)
					_6866[_657] /= _6869;
				_6869 = 1;
			}
			let _6870;
			_6870 = 1 - _6869;
			_6866[0] = _6870;
			let _990;
			_990 = 0;
			for (let _657 = 0; _657 < _658._659; _657++)
				_990 += _6864[_657] * _6866[_657];
			_6862[_570] = _990;
		}
		return _987;
	}

	static _6871(_445)
	{
		let _6872 = new Array();
		_6872.length = _445._662[0]._656.length;
		_6872.fill(1);
		let _6873;
		_6873 = _1706._1732(_445._1158) * _929._6338;
		let _6874;
		_6874 = _445._2346;
		for (let _6875 = 0; _6875 < _6874.length; _6875++)
		{
			let _6876 = _6874[_6875];
			let _1349, _6877;
			_1349 = Math.round(_6876._2355 * _6873);
			_6877 = Math.round(_6876._2357 * _6873);
			let _6878, _6879;
			_6878 = _1349;
			if (_6878 < 0)
				_6878 = 0;
			_6879 = _6877;
			if (_6879 >= _6872.length)
				_6879 = _6872.length - 1;
			for (let _6880 = _6878; _6880 < _6879; _6880++)
			{
				let _6881;
				_6881 = _6880 - _1349;
				_6881 /= _6873;
				let value;
				value = _6876._5516(_6876._2355 + _6881);
				if (_6876._2354 == "amplitude")
				{
					if (_6876._2360)
						_6872[_6880] *= (1 + value);
					else
						_6872[_6880] *= (1 - value);
				}
			}
		}
		return _6872;
	}

	static _6882(_510, _6451, _6446, _6337)
	{
		function _6883(_6884, _6885) 
		{
			let _6886 = _6884.length;
			let _6887 = _6885.length;
			for (let _6888 = 1; _6888 <= _6886; _6888++)
			{
				let _6889, _6890;
				_6889 = _6890 = 0;
				for (let x = 0; x < _6887; x++)
				{
					let y;
					y = _6885[x];
					let _1321;
					_1321 = x;
					_1321 /= _6887;
					_1321 *= Math.PI * 2;
					_1321 *= _6888;
					_6889 += y * Math.cos(_1321);
					_6890 += y * Math.sin(_1321);
				}
				_6884[_6888 - 1][0] = _6889;
				_6884[_6888 - 1][1] = _6890;
			}
			let _6891 = 1 / (_6887 * 0.5);
			for (let _6888 = 1; _6888 <= _6886; _6888++)
			{
				let _6892;
				_6892 = _6884[_6888 - 1];
				_6892[0] *= _6891;
				_6892[1] *= _6891;
			}
		}
		function _6893(_6885, _6884)
		{
			let _6886 = _6884.length;
			let _6887 = _6885.length;
			_6885.fill(0);
			for (let _6888 = 1; _6888 <= _6886; _6888++)
			{
				let _6892 = _6884[_6888 - 1];
				let read, _6890;
				read = _6892[0];
				_6890 = _6892[1];
				let _6894, _6895;
				_6894 = _581._1319(read, _6890, function (_6896) { _6895 = _6896; });
				for (let x = 0; x < _6887; x++)
				{
					let _1321;
					_1321 = -x ;
					_1321 /= _6887;
					_1321 *= Math.PI * 2;
					_1321 *= _6888;
					_1321 += _6894;
					_6885[x] += _6895 * Math.cos(_1321);
				}
			}
		}

		const _6897 = 256;
		if ((_6897 % 2) != 0)
			console.assert(0);
		const _6898 = _6897 / 2;
		const _6899 = Math.floor((_6897 - 1) / 2);

		let _6900 = new Array(_6899);
		_6900.fill(0);
		let _6901, _6902;
		_6901 = Math.round(_581._761(0, _6899 - 1, 0, _929._6338 / 2, _6451));
		_6902 = Math.round(_581._761(0, _6899 - 1, 0, _929._6338 / 2, _6446 == -1 ? _929._6338 / 2 : _6446));
		if (_6901 < 0)
			_6901 = 0;
		if (_6901 >= _6899)
			_6901 = _6899 - 1;
		if (_6902 < 0)
			_6902 = 0;
		if (_6902 >= _6899)
			_6902 = _6899 - 1;
		for (let _6903 = _6901; _6903 <= _6902; _6903++)
		{
			let _518;
			_518 = _581._761(0, _929._6338 / 2, 0, _6899 - 1, _6903);
			_6900[_6903] = _2716._6335(_6451, _6446, _518, _6337);
		}

		let _6904 = _510.slice();
		_510.fill(0);
		let _1013;
		_1013 = Math.floor((_510.length + _6898 - 1) / _6898);
		_1013++;
		let _6905 = new Array(_6897);
		let _6884 = new Array(_6899);
		for (let _754 = 0; _754 < _6899; _754++)
			_6884[_754] = new Array(2);
		function _6906(_754)
		{
			if (_754 < 0 || _754 >= _6904.length)
				return 0;
			else
				return _6904[_754];
		}
		function _6907(_754, _982)
		{
			if (_754 < 0 || _754 >= _510.length)
				return ;
			_510[_754] += _982;
		}
		for (let _979 = 0; _979 < _1013; _979++)
		{
			let _6908;
			_6908 = _979 * _6898;
			let _6858, _6859;
			_6858 = _6908 - _6898;
			_6859 = _6908 + _6898 - 1;
			for (let _978 = 0; _978 < _6898; _978++)
				_6905[_978] = _6906(_6858 + _978) * _978 / _6898;
			for (let _978 = _6898; _978 < _6897; _978++)
				_6905[_978] = _6906(_6858 + _978) * ((_6897 - _978) / _6898);
			_6883(_6884, _6905);
			for (let _754 = 0; _754 < _6899; _754++)
			{
				let _6892 = _6884[_754];
				let _6909 = _6900[_754];
				_6892[0] *= _6909;
				_6892[1] *= _6909;
			}
			_6893(_6905, _6884);
			for (let _1015 = 0; _1015 < _6897; _1015++)
				_6907(_6858 + _1015,_6905[_1015]);
		}
	}
	static _6910(_6911, _6912, _6876, _445)
	{
		let _6873;
		_6873 = _1706._1732(_445._1158) * _929._6338;
		let _1349, _6877;
		_1349 = Math.round(_6876._2355 * _6873);
		_6877 = Math.round(_6876._2357 * _6873);
		let _6913;
		_6913 = _6877 - _1349 + 1;
		if (_6913 <= 0)
			return;
		let _6914;
		_6914 = Math.round(_6876._2180 * _6873);
		let _6915=new Array();
		_6915.length = _6913;
		for (let _6916 = 0; _6916 < _6913; _6916++)
		{
			let _6917;
			_6917 = _1349 + _6916;
			if (_6917 < 0)
				_6915[_6916] = 0;
			else if (_6917 >= _6912.length)
				_6915[_6916] = 0;
			else
				_6915[_6916] = _6912[_6917] * _6876._5516(_6917 / _6873);
		}
		if (!(_6876._6332 == 0 && _6876._6333 == -1 && _6876._6334 == 0))
			_1011._6882(_6915, _6876._6332, _6876._6333, _6876._6334);
		let _6918;
		_6918 = Math.round(_6876._2181 / _6876._2180);
		let _6919;
		_6919 = _1349;
		for (let _635 = 0; _635 < _6918; _635++)
		{
			let _6920;
			_6920 = 1 - (_635 + 1) / (_6918 + 1);
			
			_6919 += _6914;
			if (_6919 >= _6911.length)
				break;
			for (let _6916 = 0; _6916 < _6913; _6916++)
			{
				let _6917;
				_6917 = _6919 + _6916;
				if (_6917 < 0)
					continue;
				if (_6917 >= _6911.length)
					break;
				_6911[_6917] += _6915[_6916] * _6920;
			}
		}
	}

	static _6543(_445)
	{
		if (!_445._662[0]._656)
			return [null, null, null, null, null];
		
		let _6872;
		_6872 = _1011._6871(_445)

		let _1008, _1009, _443, _878, _879;
		function _6921(_510)
		{
			if (!_510)
				return null;
			return new Float64Array(_510._656);
		}
		_1008 = _6921(_445._655);
		let _6922;
		_6922 = _1011._6849(_445);
		_1009 = _6922 ? _6922._656 : null;
		_443 = _6921(_445._663);
		_878 = _6921(_445._664);
		_879 = _6921(_445._665);

		for (let _570 = 0; _570 < _6872.length; _570++)
		{
			let _6923;
			_6923 = _6872[_570];
			if (_1008 && _570<_1008.length)
				_1008[_570] *= _6923;
			if (_1009 && _570 < _1009.length)
				_1009[_570] *= _6923;
			if (_878 && _570 < _878.length)
				_878[_570] *= _6923;
			if (_879 && _570 < _879.length)
				_879[_570] *= _6923;
		}

		
		{
			let _6924, _6925;
			if (_1008)
				_6924 = new Float64Array(_1008);
			if (_1009)
				_6925 = new Float64Array(_1009);
			let _6874;
			_6874 = _445._2346;
			for (let _6875 = 0; _6875 < _6874.length; _6875++)
			{
				let _6876 = _6874[_6875];
				if (_6876._2354 != "echo")
					continue;
				if (_1008)
					_1011._6910(_1008, _6924, _6876, _445);
				if (_1009)
					_1011._6910(_1009, _6925, _6876, _445);
			}
		}

		return [_1008, _1009, _443, _878, _879];
	}

	static _2375(_445)
	{
		let _2133;
		_2133 = _1141._1654(_445);
		for (let _6926 = 0; _6926 < _2133.length; _6926++)
		{
			let _333;
			_333 = _2133[_6926];
			_333._1657._5627(_2133, _6926, "_1350");
			_333._1657._5627(_2133, _6926, "_1351");
		}
		_1141._1659(_445, _2133);
	}

	static _1840(_445, _1839 = true)
	{
		let _620;
		_620 = _585.indexOf(_445);
		if (_1839)
			_445._1754();
		_445._1827 = new Date().getTime();
		_629._619(_620);
		if (_1839)
			_617._619(_620);
		_595._597();
	}
}
function _2376(_445, _1839 = true)
{
	_1011._1840(_445, _1839);
}
