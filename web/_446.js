class _6722
{
	static _1886(_6518)
	{
		let _1677;
		_1677 = _53.checked;

		function _6519(_1240, _982)
		{
			if (_6518 != "_7689")
				return true;
			let _610;
			_610 = _1240[_1240.length - 1];
			if (_1240.length == 2)
			{
				let _6520 =
					[
						F(""), F("语种"),
						F("调号自动"), F("调号"), F("每分钟拍数"), F("说唱"),
					];
				if (_6520.includes(_610))
					return true;
			}
			if (_1240.length >= 2)
			{
				let _6724;
				_6724 = _1240[1];
				if (_6724 == F("角色") || _6724 == F("技巧"))
					return true;
				if (_6724 == F("音符"))
				{
					if (_1240.length == 2)
						return true;
					if (_1240.length == 3)
						return true;
					if (_1240.length == 4)
					{
						if (_610 == F("音高") || _610 == F("时长") || _610 == F("连音") || _610 == F("休止符"))
							return true;
						switch (this._1156)
						{
							case "chinese":
							case "cantonese":
								if (_610 == F("音符显示"))
								{
									_1240[_1240.length - 1] = F("歌词");
									return true;
								}
								if (_610 == F("原生表音法的音节"))
								{
									_1240[_1240.length - 1] = F("发音");
									return true;
								}
								break;
							case "japanese":
								if (_610 == F("音符显示"))
								{
									_1240[_1240.length - 1] = F("歌词");
									return true;
								}
								else if (_610 == F("原文"))
								{
									_1240[_1240.length - 1] = F("歌词");
									return true;
								}
								else if (_610 == F("分身"))
									return true;
								break;
							case "english":
								if (_610 == F("音符显示"))
								{
									_1240[_1240.length - 1] = F("歌词");
									return true;
								}
								break;
						}
					}
					return false;
				}
			}
			return false;
		}
		let _3150 = new _1209();
		_3150._1235(false, true, _6519.bind(this));
		function _6725(_1232, _510, _6726)
		{
			let _1236;
			_1236 = null;
			if (_510)
				_1236 = _510._656;
			let _6727;
			if (_510 == null || _1236 == null)
				_6727 = false;
			else
			{
				if (_6518 == "_7688")
				{
					if (_6726 == "_3201")
						_6727 = true;
					else
						_6727 = false;
				}
				else if (_6518 == "_590")
					_6727 = false;
				else if (_6518 == "_7741" || _6518 == "_7689")
					_6727 = false;
			}
			_3150._1254(_1232,false);
			if (!_6727)
			{
			}
			else
			{
				for (let _754 = 0; _754 < _1236.length; _754++)
					_3150._1244(_1236[_754]);
			}
			_3150._1255(_1232);
		}
		function _6728(_1232,_305)
		{
			_3150._1252(_1232);
			function _6729(_1232,_365)
			{
				_3150._1252(_1232);
				_3150._1244(F("开始位置x"), _365._5873);
				_3150._1244(F("开始位置y"), _365._3044);
				_3150._1244(F("开始方向相对x"), _365._5874);
				_3150._1244(F("开始方向相对y"), _365._5875);
				_3150._1244(F("中间位置x"),_365._5558);
				_3150._1244(F("中间位置y"),_365._5662);
				_3150._1244(F("中间左方向相对x"),_365._5876);
				_3150._1244(F("中间左方向相对y"),_365._5877);
				_3150._1244(F("中间右方向相对x"),_365._5659);
				_3150._1244(F("中间右方向相对y"),_365._5660);
				_3150._1244(F("结束位置x"),_365._5878);
				_3150._1244(F("结束位置y"),_365._5661);
				_3150._1244(F("结束方向相对x"),_365._5656);
				_3150._1244(F("结束方向相对y"), _365._5657);
				_3150._1253(_1232);
            }
			_3150.String(F("开始音标"),_305._1784);
			_3150.String(F("开始音标_非音节性的影响者"),_305._1785);
			_3150._1244(F("开始音标_非音节性被影响的程度"),_305._3014);
			_3150._1244(F("𝓅清擦音最前面时域爆破"),_305._3015);
			_3150.String(F("开始辅音音标"),_305._1786);
			_3150.String(F("结束音标"),_305._1787);
			_3150.String(F("结束音标_非音节性的影响者"),_305._1788);
			_3150._1244(F("结束音标_非音节性被影响的程度"),_305._3016);
			_3150._1242(F("持续时间"),_305._3017);
			_3150._1244(F("开始控制点时间"),_305._3018);
			_3150._1244(F("开始控制点频率"),_305._3019);
			_3150._1244(F("结束控制点时间"),_305._3020);
			_3150._1244(F("结束控制点频率"),_305._3021);
			_3150.String(F("类型"),_305._3022);
			_3150._1241(F("继续"),_305._3023);
			_3150._1241(F("待续"),_305._3024);
			_3150._1241(F("结束音符是爆破音不参与参数渐变"),_305._3025);
			_3150._1241(F("开始音符是爆破音不参与参数渐变"),_305._3026);
			_3150._1242(F("清擦音实际长度"),_305._3027);
			_3150._1241(F("用于过度时使能"),_305._1781);
			_3150._1242(F("用于过度时本音节的时间"),_305._3028);
			_3150._1242(F("浊辅音前声带音实际长度"),_305._3029);
			_6729(F("音量包络"),_305._3034);
			_3150._1253(_1232);
        }
		function _6730(_1232,_1775)
		{
			_3150._1254(_1232);
			for (let _5629 = 0; _5629 < _1775.length; _5629++)
				_6728(null,_1775[_5629]);
			_3150._1255();
		}
		_3150._1254(F("角色"));
		for (let _657 = 0; _657 < _658._659; _657++)
			_3150.String(_621._622(this._1153[_657]));
		_3150._1255();
		_3150._1254(F("乐器"));
		for (let _657 = 0; _657 < _658._659; _657++)
			_3150.String(this._1152[_657]);
		_3150._1255();
		_3150._1247(F("自动谱曲"), this._1138._6692());
		_3150.String(F("语种"),this._1156);
		_3150._1254(F("音符"));
		let _1681;
		_1681 = this._1164;
		for (let _754 = 0; _754 < _1681.length; _754++)
		{
			_3150._1252();
			let _455 = _1681[_754];
			_3150._1242(F("音高"),_455._1634);
			_3150._1244(F("时长"),_455._1635);
			_3150._1244(F("左侧过度时长"),_455._2426);
			_3150._1244(F("右侧过度时长"),_455._2427);
			_3150._1241(F("左侧吐字自动"),_455._6716);
			_3150._1244(F("左侧吐字延迟开始"),_455._6575);
			_3150._1244(F("左侧吐字建立耗时"),_455._6576);
			_3150._1241(F("右侧吐字自动"),_455._6717);
			_3150._1244(F("右侧吐字消失耗时"),_455._6577);
			_3150._1244(F("右侧吐字提前结束"),_455._6578);
			_3150._1241(F("连音"), _455._1637);
			{
				_3150._1254(F("编曲修饰"));
				let _443 = _455._6527;
				for (let _570 = 0; _570 < _443.length; _570++)
					_3150.String(_621._625(_443[_570]));
				_3150._1255(F("编曲修饰"));
			}
			_3150._1247(F("自动谱曲"), _455._5992._6731());
			{
				
				if (_6518 != "_7689")
					_3150._1252(F("音节发音"));
				let _358 = _455._1621;
				_3150._1241(F("休止符"),_358._1622);
				_3150._1242(F("后面连音数量"),_358._3002);
				_3150.String(F("左附属辅音"),_358._1671);
				_3150.String(F("左核心辅音"),_358._1672);
				_3150.String(F("核心元音"),_358._1673);
				_3150.String(F("右核心辅音"),_358._1674);
				_3150.String(F("右附属辅音"),_358._1675);
				_3150.String(F("原生表音法的音节"), _358._1623);

				
				if (_6518 == "_7689" && this._1156 == "english")
				{
					let _6732;
					_6732 = _358._1640 + _358._1688();
					_3150.String(F("音符显示"), _6732);
				}
				else if (_6518 == "_7689" && this._1156 == "japanese")
				{
					if (!_1043._1676(_358, _1677))
						_3150.String(F("音符显示"), _1043._1547(_358._1640));
				}
				else 
				{
					_3150.String(F("音符显示"), _358._1640);
				}
				
				_3150.String(F("辅助显示"), _358._1641);
				
				
				if (_6518 == "_7689" && this._1156 == "japanese")
				{
					if (_1043._1676(_358, _1677))
					{
						_3150.String(F("原文"), _358._1642);
						_3150._1242(F("分身"), _358._1643);
					}
				}
				else
				{
					_3150.String(F("原文"), _358._1642);
					_3150._1242(F("分身"), _358._1643);
				}
				
				_3150._1242(F("原文重复序号"),_358._1645);
				_3150._1242(F("句子中的位置"),_358._1644);
				_3150._1241(F("词的结束"),_358._2955)
				{
					_3150._1252(F("发音详细参数"));
					let _1772 = _358._1773;
					_6730(F("左附属发音小段数组"), _1772._1776);
					_6730(F("核心发音小段数组"), _1772._1777);
					_6730(F("右附属发音小段数组"), _1772._1778);
					_6728(F("后面的音节过度发音小段"), _1772._1780);
					_3150._1253(F("发音详细参数"));
				}
				_3150._1241(F("右附属辅音可以借出"),_358._3279)
				_3150._1241(F("右附属辅音已经借出"),_358._3280)
				_3150._1241(F("右附属辅音可以去掉"),_358._3286)
				_3150._1241(F("右附属辅音已经去掉"),_358._3281)
				_3150._1241(F("核心左辅音可以借入"),_358._3283)
				_3150._1241(F("核心左辅音是借入的"),_358._3284)
				_3150.String(F("核心左辅音可以借入的字符"),_358._3285)
				_3150._1241(F("左附属辅音可以去掉"),_358._3287)
				_3150._1241(F("左附属辅音已经去掉"),_358._3288)
				if (_6518 != "_7689")
					_3150._1253(F("音节发音"));
			}
			_3150._1253();
		}
		_3150._1255(F("音符"));
		_3150._1241(F("调号自动"),this._1629);
		_3150._1242(F("调号"),this._920);
		_3150._1242(F("每分钟拍数"),this._1158);
		_3150._1241(F("说唱"),this._1147);
		_3150.String(F("节拍配置名称"),_621._627(this._1154));
		_3150._1241(F("纯音乐"),this._1137);
		_3150._1241(F("纯朗读"),this._1148);
		_3150._1244(F("声乐曲音量"),this._973);
		_3150._1244(F("声乐曲清擦相对音量"),this._974);
		_3150._1244(F("编曲修饰音量"),this._993);
		_3150._1244(F("打节拍旋律音量"),this._998);
		_3150._1244(F("打节拍鼓音量"), this._1000);
		_3150._1241(F("当前音节开始的清擦音放在前面的音节"), this._1159);
		_3150._1243(F("最后编辑时间"),this._1827);
		_3150._1254(F("技巧"));
		let _2379;
		_2379 = this._2346;
		for (let _754 = 0; _754 < _2379.length; _754++)
		{
			_3150._1252();
			let _429 = _2379[_754];
			_3150.String(F("类型"),_429._2354);
			_3150._1244(F("开始"),_429._2355);
			_3150._1244(F("峰的时间"),_429._2356);
			_3150._1244(F("结束"),_429._2357);
			_3150._1244(F("峰值"),_429._2358);
			_3150._1244(F("峰尖锐"),_429._2359);
			if (_429._2354 == "amplitude")
			{
				_3150._1241(F("强度增加"),_429._2360);
			}
			else if (_429._2354 == "frequency")
			{
				_3150._1241(F("频率增加"),_429._2366);
			}
			else if (_429._2354 == "trill")
			{
				_3150._1244(F("颤音速度"), _429._2072);
				_3150._1244(F("颤音相位"), _429._6311);
				_3150._1244(F("颤音速度渐变"), _429._6314);
				_3150._1244(F("颤音正弦比例"), _429._2073);
			}
			else if (_429._2354 == "echo")
			{
				_3150._1244(F("回音延迟"),_429._2180);
				_3150._1244(F("回音持续"), _429._2181);
				_3150._1244(F("回音开始频率"), _429._6332);
				_3150._1244(F("回音结束频率"), _429._6333);
				_3150._1244(F("回音形状"), _429._6334);
			}
			_3150._1253();
		}
		_3150._1255(F("技巧"));

		_6725(F("声乐清擦"), this._655, "_7262");
		_3150._1254(F("声乐声带"));
		for (let _657 = 0; _657 < _658._659; _657++)
			_6725(_657, this._662[_657], "_7262");
		_3150._1255(F("声乐声带"));
		_6725(F("编曲修饰"), this._663, "_7262");
		_6725(F("打节拍旋律"), this._664, "_7262");
		_6725(F("打节拍鼓"), this._665, "_7262");
		return _3150._1260();
	}

	static _2726(_893)
	{
		if (_3151)
		{
			let _784 = _893;
			
			let _6733;
			_6733 = _784;
			let _734 = new _804();
			_734._807(_6733, "read_from_file");
			if (_784 = _734._813("_6938"))
				this._1153[0] = _621._624(_784._792());
			if (_784 = _734._813("_7862"))
				this._1153[1] = _621._624(_784._792());
			if (_784 = _734._813("_7863"))
				this._1153[2] = _621._624(_784._792());
			if (_784 = _734._813("_1291"))
				this._1152[0] = _784._792();
			if (_784 = _734._813("_7864"))
				this._1152[1] = _784._792();
			if (_784 = _734._813("_7865"))
				this._1152[2] = _784._792();
			function _6734(_510)
			{
				let length;
				length = _784._789();
				if (length == 0)
					_510._656 = null;
				else
				{
					_510._656 = new Float64Array(length);
					for (let _754 = 0; _754 < length; _754++)
						_510._656[_754] = _784._791();
				}
			}
			function _6735(_305, _784)
			{
				function _6736(_365, _784)
				{
					let _734 = new _804();
					_734._807(_784, "read_from_file");
					let _6737;
					if (_6737 = _734._813("_7866"))
						_365._5873 = _6737._791();
					if (_6737 = _734._813("_7867"))
						_365._3044 = _6737._791();
					if (_6737 = _734._813("_7868"))
						_365._5874 = _6737._791();
					if (_6737 = _734._813("_7869"))
						_365._5875 = _6737._791();
					if (_6737 = _734._813("_7870"))
						_365._5558 = _6737._791();
					if (_6737 = _734._813("_7871"))
						_365._5662 = _6737._791();
					if (_6737 = _734._813("_7872"))
						_365._5876 = _6737._791();
					if (_6737 = _734._813("_7873"))
						_365._5877 = _6737._791();
					if (_6737 = _734._813("_7874"))
						_365._5659 = _6737._791();
					if (_6737 = _734._813("_7875"))
						_365._5660 = _6737._791();
					if (_6737 = _734._813("_7876"))
						_365._5878 = _6737._791();
					if (_6737 = _734._813("_7877"))
						_365._5661 = _6737._791();
					if (_6737 = _734._813("_7878"))
						_365._5656 = _6737._791();
					if (_6737 = _734._813("_7879"))
						_365._5657 = _6737._791();
				}
				let _734 = new _804();
				_734._807(_784, "read_from_file");
				let _6737;
				if (_6737 = _734._813("_5349"))
					_305._1784 = _6737._792();
				if (_6737 = _734._813("_7880"))
					_305._1785 = _6737._792();
				if (_6737 = _734._813("_7881"))
					_305._3014 = _6737._791();
				if (_6737 = _734._813(F("𝓅清擦音最前面时域爆破")))
					_305._3015 = _6737._791();
				if (_6737 = _734._813("_7882"))
					_305._1786 = _6737._792();
				if (_6737 = _734._813("_5350"))
					_305._1787 = _6737._792();
				if (_6737 = _734._813("_7883"))
					_305._1788 = _6737._792();
				if (_6737 = _734._813("_7884"))
					_305._3016 = _6737._791();
				if (_6737 = _734._813("_1611"))
					_305._3017 = _6737._789();
				if (_6737 = _734._813("_7885"))
					_305._3018 = _6737._791();
				if (_6737 = _734._813("_7886"))
					_305._3019 = _6737._791();
				if (_6737 = _734._813("_7887"))
					_305._3020 = _6737._791();
				if (_6737 = _734._813("_7888"))
					_305._3021 = _6737._791();
				if (_6737 = _734._813("_3289"))
					_305._3022 = _6737._792();
				if (_6737 = _734._813("_7889"))
					_305._3023 = _6737._788();
				if (_6737 = _734._813("_7890"))
					_305._3024 = _6737._788();
				if (_6737 = _734._813("_7891"))
					_305._3025 = _6737._788();
				if (_6737 = _734._813("_7892"))
					_305._3026 = _6737._788();
				if (_6737 = _734._813("_7893"))
					_305._3027 = _6737._789();
				if (_6737 = _734._813("_7894"))
					_305._1781 = _6737._788();
				if (_6737 = _734._813("_7895"))
					_305._3028 = _6737._789();
				if (_6737 = _734._813("_7896"))
					_305._6738 = _6737._791();
				if (_6737 = _734._813("_7897"))
					_305._3029 = _6737._789();
				if (_6737 = _734._813("_365"))
					_6736(_305._3034, _6737);
			}
			function _6739(_1775, _784)
			{
				let _734 = new _804();
				_734._807(_784, "read_from_file");
				let _6737;
				if (_6737 = _734._813("_7898"))
				{
					_1775.length = _6737._789();
					for (let _5629 = 0; _5629 < _1775.length; _5629++)
					{
						if (_6737 = _734._813("_305" + _5629))
						{
							let _305 = _1775[_5629] = new _3013();;
							_6735(_305, _6737);
						}
					}
				}
			}
			if (_784 = _734._813("_270"))
				this._1138._6693(_784._792());
			if (_784 = _734._813("_3149"))
				this._1156 = _784._792();
			if (_784 = _734._813("note"))
			{
				let _6740 = new _804();
				_6740._807(_784, "read_from_file");
				let _6741;
				if (_6741 = _6740._813("_7899"))
				{
					let _1681;
					_1681 = this._1164;
					_1681.length = _6741._789();
					for (let _754 = 0; _754 < _1681.length; _754++)
					{
						if (_6741 = _6740._813("_455" + _754))
						{
							let _6742 = new _804();
							_6742._807(_6741, "read_from_file");;
							let _455;
							_455 = new _1633();
							_1681[_754] = _455;
							let _6737;
							if (_6737 = _6742._813("_2188"))
								_455._1634 = _6737._789();
							if (_6737 = _6742._813("_1607"))
								_455._1635 = _6737._791();
							if (_6737 = _6742._813("_6992"))
								_455._2426 = _6737._791();
							if (_6737 = _6742._813("_6993"))
								_455._2427 = _6737._791();
							if (_6737 = _6742._813("_7900"))
								_455._6716 = _6737._788();
							if (_6737 = _6742._813("_6995"))
								_455._6575 = _6737._791();
							if (_6737 = _6742._813("_6996"))
								_455._6576 = _6737._791();
							if (_6737 = _6742._813("_7901"))
								_455._6717 = _6737._788();
							if (_6737 = _6742._813("_6997"))
								_455._6577 = _6737._791();
							if (_6737 = _6742._813("_6998"))
								_455._6578 = _6737._791();
							if (_6737 = _6742._813("_6796"))
								_455._1637 = _6737._788();
							if (_6737 = _6742._813("_443"))
							{
								let _6567 = _455._6527;
								_6567.length = _6737._789();
								for (let _570 = 0; _570 < _6567.length; _570++)
								{
									let _6743;
									_6743 = _6737._792();
									_6743 = _621._626(_6743);
									_6567[_570] = _6743;
								}
							}
							if (_6737 = _6742._813("_270"))
								_455._5992._6744(_6737._792());
							if (_6737 = _6742._813("_358"))
							{
								let _358 = _455._1621;
								let _6745 = new _804();
								_6745._807(_6737, "read_from_file");
								let _6746;
								if (_6746 = _6745._813("_2746"))
									_358._1622 = _6746._788();
								if (_6746 = _6745._813("_7902"))
									_358._3002 = _6746._789();
								if (_6746 = _6745._813("_3211"))
									_358._1671 = _6746._792();
								if (_6746 = _6745._813("_3212"))
									_358._1672 = _6746._792();
								if (_6746 = _6745._813("_3213"))
									_358._1673 = _6746._792();
								if (_6746 = _6745._813("_3214"))
									_358._1674 = _6746._792();
								if (_6746 = _6745._813("_3215"))
									_358._1675 = _6746._792();
								if (_6746 = _6745._813("_5862"))
									_358._1623 = _6746._792();
								if (_6746 = _6745._813("_6732"))
									_358._1640 = _6746._792();
								if (_6746 = _6745._813("_7903"))
									_358._1641 = _6746._792();
								if (_6746 = _6745._813("_7904"))
									_358._1642 = _6746._792();
								if (_6746 = _6745._813("_7905"))
									_358._1645 = _6746._789();
								if (_6746 = _6745._813("_6757"))
									_358._1643 = _6746._789();
								if (_6746 = _6745._813("_7906"))
									_358._1644 = _6746._789();
								if (_6746 = _6745._813("_2975"))
									_358._2955 = _6746._788();
								if (_6746 = _6745._813("_1772"))
								{
									let _1772 = _358._1773;
									let _6747 = new _804();
									_6747._807(_6746, "read_from_file");
									let _6748;
									if (_6748 = _6747._813("_7907"))
										_6739(_1772._1776, _6748);
									if (_6748 = _6747._813("_5581"))
										_6739(_1772._1777, _6748);
									if (_6748 = _6747._813("_5562"))
										_6739(_1772._1778, _6748);
									if (_6748 = _6747._813("_1779"))
										_6735(_1772._1780, _6748);
								}
								if (_6746 = _6745._813("_7908"))
									_358._3279 = _6746._788();
								if (_6746 = _6745._813("_7909"))
									_358._3280 = _6746._788();
								if (_6746 = _6745._813("_7910"))
									_358._3286 = _6746._788();
								if (_6746 = _6745._813("_7911"))
									_358._3281 = _6746._788();
								if (_6746 = _6745._813("_7912"))
									_358._3283 = _6746._788();
								if (_6746 = _6745._813("_7913"))
									_358._3284 = _6746._788();
								if (_6746 = _6745._813("_5868"))
									_358._3285 = _6746._792();
								if (_6746 = _6745._813("_7914"))
									_358._3287 = _6746._788();
								if (_6746 = _6745._813("_7915"))
									_358._3288 = _6746._788();
							}
							
							if (_6737 = _6742._813("_1579"))
							{
								let _1579;
								_1579 = _6737._792();
								_455._1621._1642 = _1579;
								_455._1621._1640 = _1579;
								if (_1579 == L("⌒"))
									_455._1637 = true;
								else
									_455._1637 = false;
							}
							
						}
					}
				}
			}
			if (_784 = _734._813("_141"))
				this._1629 = _784._788();
			if (_784 = _734._813("_939"))
				this._920 = _784._789();
			if (_784 = _734._813("_145"))
				this._1158 = _784._789();
			if (_784 = _734._813("_164"))
				this._1147 = _784._788();
			if (_784 = _734._813("_7916"))
			{
				this._1154 = _784._792();
				this._1154 = _621._628(this._1154);
			}
			if (_784 = _734._813("_165"))
				this._1137 = _784._788();
			if (_784 = _734._813("_166"))
				this._1148 = _784._788();
			if (_784 = _734._813("_1876"))
				this._973 = _784._791();
			if (_784 = _734._813("_7917"))
				this._974 = _784._791();
			if (_784 = _734._813("_991"))
				this._993 = _784._791();
			if (_784 = _734._813("_997"))
				this._998 = _784._791();
			if (_784 = _734._813("_999"))
				this._1000 = _784._791();
			if (_784 = _734._813("_6945"))
				this._1159 = _784._788();
			if (_784 = _734._813("_7918"))
				this._1827 = _784._790();
			if (_784 = _734._813("skill"))
			{
				let _6740 = new _804();
				_6740._807(_784, "read_from_file");
				let _6741;
				if (_6741 = _6740._813("_7919"))
				{
					let _2379;
					_2379 = this._2346;
					_2379.length = _6741._789();
					for (let _754 = 0; _754 < _2379.length; _754++)
					{
						if (_6741 = _6740._813("_429" + _754))
						{
							let _6742 = new _804();
							_6742._807(_6741, "read_from_file");;
							let _429 = new _2716();
							_2379[_754] = _429;
							let _6737;
							if (_6737 = _6742._813("_3289"))
								_429._2354 = _6737._792();
							if (_6737 = _6742._813("_2299"))
								_429._2355 = _6737._791();
							if (_6737 = _6742._813("_7920"))
								_429._2356 = _6737._791();
							if (_6737 = _6742._813("_1192"))
								_429._2357 = _6737._791();
							if (_6737 = _6742._813("_6412"))
								_429._2358 = _6737._791();
							if (_6737 = _6742._813("_6397"))
								_429._2359 = _6737._791();
							if (_429._2354 == "amplitude")
							{
								if (_6737 = _6742._813("_7921"))
									_429._2360 = _6737._788();
							}
							else if (_429._2354 == "frequency")
							{
								if (_6737 = _6742._813("_7922"))
									_429._2366 = _6737._788();
							}
							else if (_429._2354 == "trill")
							{
								if (_6737 = _6742._813("_7923"))
									_429._2072 = _6737._791();
								if (_6737 = _6742._813("_7924"))
									_429._6311 = _6737._791();
								if (_6737 = _6742._813("_7925"))
									_429._6314 = _6737._791();
								if (_6737 = _6742._813("_7926"))
									_429._2073 = _6737._791();
							}
							else if (_429._2354 == "echo")
							{
								if (_6737 = _6742._813("_7927"))
									_429._2180 = _6737._791();
								if (_6737 = _6742._813("_7928"))
									_429._2181 = _6737._791();
								if (_6737 = _6742._813("_6451"))
									_429._6332 = _6737._791();
								if (_6737 = _6742._813("_6446"))
									_429._6333 = _6737._791();
								if (_6737 = _6742._813("_6337"))
									_429._6334 = _6737._791();
							}
						}
					}
				}
			}
			if (_784 = _734._813("_653"))
				_6734(this._655);
			if (_784 = _734._813("_660"))
				_6734(this._662[0]);
			if (_784 = _734._813("_7929"))
				_6734(this._662[1]);
			if (_784 = _734._813("_7930"))
				_6734(this._662[2]);
			if (_784 = _734._813("_443"))
				_6734(this._663);
			if (_784 = _734._813("_878"))
				_6734(this._664);
			if (_784 = _734._813("_879"))
				_6734(this._665);
			_784 = _6733;
			
		}
		else
		{
			
			let _1580 = new _1261();
			_1580._1264(_893);
			let _623;
			if (_1580._1254(F("角色")) !== undefined)
			{
				let length;
				length = _1580._1266();
				if (length != _658._659)
					console.assert(0);
				for (let _657 = 0; _657 < _658._659; _657++)
					if ((_623 = _1580.String(_657)) !== undefined)
						this._1153[_657] = _621._624(_623);
				_1580._1255();
			}
			if (_1580._1254(F("乐器")) !== undefined)
			{
				let length;
				length = _1580._1266();
				if (length != _658._659)
					console.assert(0);
				for (let _657 = 0; _657 < _658._659; _657++)
					if ((_623 = _1580.String(_657)) !== undefined)
						this._1152[_657] = _623;
				_1580._1255();
			}
			let _6749;
			_6749 = false;
			function _6750(_510,_1232)
			{
				_623 = _1580._1254(_1232);
				if (_623 === undefined)
				{
					_510._656 = null;
					return;
				}
				let length;
				length = _1580._1266();
				if(length == 0)
				{
					_510._656 = null;
				}
				else
				{
					_510._656 = new Float64Array(length);
					for (let _754 = 0; _754 < length; _754++)
						_510._656[_754] = _1580._1244(_754);
				}
				_1580._1255(_1232);
			}
			function _6751(_305, _1232)
			{
				if (_1580._1252(_1232) !== undefined)
				{
					function _6752(_365, _1232)
					{
						if (_1580._1252(_1232) !== undefined)
						{
							if ((_623 = _1580._1244(F("开始位置x"))) !== undefined)
								_365._5873 = _623;
							if ((_623 = _1580._1244(F("开始位置y"))) !== undefined)
								_365._3044 = _623;
							if ((_623 = _1580._1244(F("开始方向相对x"))) !== undefined)
								_365._5874 = _623;
							if ((_623 = _1580._1244(F("开始方向相对y"))) !== undefined)
								_365._5875 = _623;
							if ((_623 = _1580._1244(F("中间位置x"))) !== undefined)
								_365._5558 = _623;
							if ((_623 = _1580._1244(F("中间位置y"))) !== undefined)
								_365._5662 = _623;
							if ((_623 = _1580._1244(F("中间左方向相对x"))) !== undefined)
								_365._5876 = _623;
							if ((_623 = _1580._1244(F("中间左方向相对y"))) !== undefined)
								_365._5877 = _623;
							if ((_623 = _1580._1244(F("中间右方向相对x"))) !== undefined)
								_365._5659 = _623;
							if ((_623 = _1580._1244(F("中间右方向相对y"))) !== undefined)
								_365._5660 = _623;
							if ((_623 = _1580._1244(F("结束位置x"))) !== undefined)
								_365._5878 = _623;
							if ((_623 = _1580._1244(F("结束位置y"))) !== undefined)
								_365._5661 = _623;
							if ((_623 = _1580._1244(F("结束方向相对x"))) !== undefined)
								_365._5656 = _623;
							if ((_623 = _1580._1244(F("结束方向相对y"))) !== undefined)
								_365._5657 = _623;
							_1580._1253(_1232);
						}
					}
					if ((_623 = _1580.String(F("开始音标"))) !== undefined)
						_305._1784 = _623;
					if ((_623 = _1580.String(F("开始音标_非音节性的影响者"))) !== undefined)
						_305._1785 = _623;
					if ((_623 = _1580._1244(F("开始音标_非音节性被影响的程度"))) !== undefined)
						_305._3014 = _623;
					if ((_623 = _1580._1244(F("𝓅清擦音最前面时域爆破"))) !== undefined)
						_305._3015 = _623;
					if ((_623 = _1580.String(F("开始辅音音标"))) !== undefined)
						_305._1786 = _623;
					if ((_623 = _1580.String(F("结束音标"))) !== undefined)
						_305._1787 = _623;
					if ((_623 = _1580.String(F("结束音标_非音节性的影响者"))) !== undefined)
						_305._1788 = _623;
					if ((_623 = _1580._1244(F("结束音标_非音节性被影响的程度"))) !== undefined)
						_305._3016 = _623;
					if ((_623 = _1580._1242(F("持续时间"))) !== undefined)
						_305._3017 = _623;
					if ((_623 = _1580._1244(F("开始控制点时间"))) !== undefined)
						_305._3018 = _623;
					if ((_623 = _1580._1244(F("开始控制点频率"))) !== undefined)
						_305._3019 = _623;
					if ((_623 = _1580._1244(F("结束控制点时间"))) !== undefined)
						_305._3020 = _623;
					if ((_623 = _1580._1244(F("结束控制点频率"))) !== undefined)
						_305._3021 = _623;
					if ((_623 = _1580.String(F("类型"))) !== undefined)
						_305._3022 = _623;
					if ((_623 = _1580._1241(F("继续"))) !== undefined)
						_305._3023 = _623;
					if ((_623 = _1580._1241(F("待续"))) !== undefined)
						_305._3024 = _623;
					if ((_623 = _1580._1241(F("结束音符是爆破音不参与参数渐变"))) !== undefined)
						_305._3025 = _623;
					if ((_623 = _1580._1241(F("开始音符是爆破音不参与参数渐变"))) !== undefined)
						_305._3026 = _623;
					if ((_623 = _1580._1242(F("清擦音实际长度"))) !== undefined)
						_305._3027 = _623;
					if ((_623 = _1580._1241(F("用于过度时使能"))) !== undefined)
						_305._1781 = _623;
					if ((_623 = _1580._1242(F("用于过度时本音节的时间"))) !== undefined)
						_305._3028 = _623;
					if ((_623 = _1580._1244(F("浊辅音前声带音音量"))) !== undefined)
						_305._6738 = _623;
					if ((_623 = _1580._1242(F("浊辅音前声带音实际长度"))) !== undefined)
						_305._3029 = _623;
					_6752(_305._3034, F("音量包络"));
					_1580._1253(_1232);
				}
			}
			function _6753(_1775, _1232)
			{
				if ((_623 = _1580._1254(_1232)) !== undefined)
				{
					_1775.length = _1580._1266();
					for (let _5629 = 0; _5629 < _1775.length; _5629++)
					{
						let _305 = _1775[_5629] = new _3013();
						_6751(_305, _5629);
					}
					_1580._1255(_1232);
				}
			}
			if ((_623 = _1580._1247(F("自动谱曲"))) !== undefined)
				this._1138._6693(_623);
			if ((_623 = _1580.String(F("语种"))) !== undefined)
				this._1156 = _623;
			if ((_623 = _1580._1254(F("音符"))) !== undefined)
			{
				let _1681;
				_1681 = this._1164;
				_1681.length = _1580._1266();
				let _6754 = new _6755();
				_6754._1029();
				for (let _754 = 0; _754 < _1681.length; _754++)
				{
					if ((_623 = _1580._1252(_754)) !== undefined)
					{
						let _455;
						_455 = new _1633();
						_1681[_754] = _455;
						if ((_623 = _1580._1242(F("音高"))) !== undefined)
							_455._1634 = _623;
						if ((_623 = _1580._1244(F("时长"))) !== undefined)
							_455._1635 = _623;
						if ((_623 = _1580._1244(F("左侧过度时长"))) !== undefined)
							_455._2426 = _623;
						if ((_623 = _1580._1244(F("右侧过度时长"))) !== undefined)
							_455._2427 = _623;
						if ((_623 = _1580._1241(F("左侧吐字自动"))) !== undefined)
							_455._6716 = _623;
						if ((_623 = _1580._1244(F("左侧吐字延迟开始"))) !== undefined)
							_455._6575 = _623;
						if ((_623 = _1580._1244(F("左侧吐字建立耗时"))) !== undefined)
							_455._6576 = _623;
						if ((_623 = _1580._1241(F("右侧吐字自动"))) !== undefined)
							_455._6717 = _623;
						if ((_623 = _1580._1244(F("右侧吐字消失耗时"))) !== undefined)
							_455._6577 = _623;
						if ((_623 = _1580._1244(F("右侧吐字提前结束"))) !== undefined)
							_455._6578 = _623;
						if ((_623 = _1580._1241(F("连音"))) !== undefined)
							_455._1637 = _623;
						if ((_623 = _1580._1254(F("编曲修饰"))) !== undefined)
						{
							let _6567 = _455._6527;
							_6567.length = _1580._1266();
							for (let _570 = 0; _570 < _6567.length; _570++)
							{
								if ((_623 = _1580.String(_570)) !== undefined)
									_6567[_570] = _623;
							}
							_1580._1255(F("编曲修饰"));
						}

						if ((_623 = _1580._1247(F("自动谱曲"))) !== undefined)
							_455._5992._6744(_623);
						if ((_623 = _1580._1252(F("音节发音"))) !== undefined)
						{
							let _358 = _455._1621;
							if ((_623 = _1580._1241(F("休止符"))) !== undefined)
								_358._1622 = _623;
							if ((_623 = _1580._1242(F("后面连音数量"))) !== undefined)
								_358._3002 = _623;
							if ((_623 = _1580.String(F("左附属辅音"))) !== undefined)
								_358._1671 = _623;
							if ((_623 = _1580.String(F("左核心辅音"))) !== undefined)
								_358._1672 = _623;
							if ((_623 = _1580.String(F("核心元音"))) !== undefined)
								_358._1673 = _623;
							if ((_623 = _1580.String(F("右核心辅音"))) !== undefined)
								_358._1674 = _623;
							if ((_623 = _1580.String(F("右附属辅音"))) !== undefined)
								_358._1675 = _623;
							if ((_623 = _1580.String(F("原生表音法的音节"))) !== undefined)
								_358._1623 = _623;
							if ((_623 = _1580.String(F("音符显示"))) !== undefined)
								_358._1640 = _623;
							if ((_623 = _1580.String(F("辅助显示"))) !== undefined)
								_358._1641 = _623;
							if ((_623 = _1580.String(F("原文"))) !== undefined)
								_358._1642 = _623;
							if ((_623 = _1580._1242(F("原文重复序号"))) !== undefined)
								_358._1645 = _623;
							if ((_623 = _1580._1242(F("分身"))) !== undefined)
								_358._1643 = _623;
							if ((_623 = _1580._1242(F("句子中的位置"))) !== undefined)
								_358._1644 = _623;
							if ((_623 = _1580._1241(F("词的结束"))) !== undefined)
								_358._2955 = _623;

							if (_1580._1252(F("发音详细参数")) != undefined)
							{
								let _1772 = _358._1773;
								_6753(_1772._1776, F("左附属发音小段数组"));
								_6753(_1772._1777, F("核心发音小段数组"));
								_6753(_1772._1778, F("右附属发音小段数组"));
								_6751(_1772._1780, F("后面的音节过度发音小段"));
								_1580._1253(F("发音详细参数"));
							}

							if ((_623 = _1580._1241(F("右附属辅音可以借出"))) !== undefined)
								_358._3279 = _623;
							if ((_623 = _1580._1241(F("右附属辅音已经借出"))) !== undefined)
								_358._3280 = _623;
							if ((_623 = _1580._1241(F("右附属辅音可以去掉"))) !== undefined)
								_358._3286 = _623;
							if ((_623 = _1580._1241(F("右附属辅音已经去掉"))) !== undefined)
								_358._3281 = _623;
							if ((_623 = _1580._1241(F("核心左辅音可以借入"))) !== undefined)
								_358._3283 = _623;
							if ((_623 = _1580._1241(F("核心左辅音是借入的"))) !== undefined)
								_358._3284 = _623;
							if ((_623 = _1580.String(F("核心左辅音可以借入的字符"))) !== undefined)
								_358._3285 = _623;
							if ((_623 = _1580._1241(F("左附属辅音可以去掉"))) !== undefined)
								_358._3287 = _623;
							if ((_623 = _1580._1241(F("左附属辅音已经去掉"))) !== undefined)
								_358._3288 = _623;
							_1580._1253(F("音节发音"));
						}
						else
						{
							_6749 = true;
							let _358 = _455._1621;
							if ((_623 = _1580._1241(F("休止符"))) !== undefined)
								_358._1622 = _623;
							if ((!_455._1637) && (!_358._1622))
							{
								switch (this._1156)
								{
									case "chinese":
									case "cantonese":
										if ((_623 = _1580._1241(F("歌词"))) !== undefined)
											_358._1642 = _623;
										_358._1643 = 0;
										_358._1644 = _754;
										break;
									case "english":
										if ((_623 = _1580._1241(F("歌词"))) !== undefined)
										{
											let _904;
											_904 = _6754._6756(_1681, _754, _623);
											if (_904)
												return _904;
										}
										break;
									case "japanese":
										if ((_623 = _1580._1242(F("分身"))) !== undefined)
										{
											let _6757;
											_6757 = _623;
											let _6758;
											if ((_6758 = _1580._1241(F("歌词"))) !== undefined)
											{
												_358._1642 = _6758;
												_358._1643 = _6757;
												_358._1644 = _754;
											}
										}
										else if ((_623 = _1580._1241(F("歌词"))) !== undefined)
										{
											let _1548;
											_1548 = _623;
											_358._1642 = _1548;
											_358._1643 = 0;
											_358._1644 = _754;
										}
										break;
								}
							}
						}
						_1580._1253(_754)
					}
				}
				_1580._1255(F("音符"));
			}
			if ((_623 = _1580._1241(F("调号自动"))) !== undefined)
				this._1629 = _623;
			if ((_623 = _1580._1242(F("调号"))) !== undefined)
				this._920 = _623;
			if ((_623 = _1580._1242(F("每分钟拍数"))) !== undefined)
				this._1158 = _623;
			if ((_623 = _1580._1241(F("说唱"))) !== undefined)
				this._1147 = _623;
			if ((_623 = _1580.String(F("节拍配置名称"))) !== undefined)
				this._1154 = _621._628(_623);
			if ((_623 = _1580._1241(F("纯音乐"))) !== undefined)
				this._1137 = _623;
			if ((_623 = _1580._1241(F("纯朗读"))) !== undefined)
				this._1148 = _623;
			if ((_623 = _1580._1244(F("声乐曲音量"))) !== undefined)
				this._973 = _623;
			if ((_623 = _1580._1244(F("声乐曲清擦相对音量"))) !== undefined)
				this._974 = _623;
			if ((_623 = _1580._1244(F("编曲修饰音量"))) !== undefined)
				this._993 = _623;
			if ((_623 = _1580._1244(F("打节拍旋律音量"))) !== undefined)
				this._998 = _623;
			if ((_623 = _1580._1244(F("打节拍鼓音量"))) !== undefined)
				this._1000 = _623;
			if ((_623 = _1580._1241(F("当前音节开始的清擦音放在前面的音节"))) !== undefined)
				this._1159 = _623;
			if ((_623 = _1580._1243(F("最后编辑时间"))) !== undefined)
				this._1827 = _623;
			if ((_623 = _1580._1254(F("技巧"))) !== undefined)
			{
				let _2379;
				_2379 = this._2346;
				_2379.length = _1580._1266();
				for (let _754 = 0; _754 < _2379.length; _754++)
				{
					if ((_623 = _1580._1252(_754)) !== undefined)
					{
						let _429 = new _2716();
						_2379[_754] = _429;
						if ((_623 = _1580.String(F("类型"))) !== undefined)
							_429._2354 = _623;
						if ((_623 = _1580._1244(F("开始"))) !== undefined)
							_429._2355 = _623;
						if ((_623 = _1580._1244(F("峰的时间"))) !== undefined)
							_429._2356 = _623;
						if ((_623 = _1580._1244(F("结束"))) !== undefined)
							_429._2357 = _623;
						if ((_623 = _1580._1244(F("峰值"))) !== undefined)
							_429._2358 = _623;
						if ((_623 = _1580._1244(F("峰尖锐"))) !== undefined)
							_429._2359 = _623;
						if (_429._2354 == "amplitude")
						{
							if ((_623 = _1580._1241(F("强度增加"))) !== undefined)
								_429._2360 = _623;
						}
						else if (_429._2354 == "frequency")
						{
							if ((_623 = _1580._1241(F("频率增加"))) !== undefined)
								_429._2366 = _623;
						}
						else if (_429._2354 == "trill")
						{
							if ((_623 = _1580._1244(F("颤音速度"))) !== undefined)
								_429._2072 = _623;
							if ((_623 = _1580._1244(F("颤音相位"))) !== undefined)
								_429._6311 = _623;
							if ((_623 = _1580._1244(F("颤音速度渐变"))) !== undefined)
								_429._6314 = _623;
							if ((_623 = _1580._1244(F("颤音正弦比例"))) !== undefined)
								_429._2073 = _623;
						}
						else if (_429._2354 == "echo")
						{
							if ((_623 = _1580._1244(F("回音延迟"))) !== undefined)
								_429._2180 = _623;
							if ((_623 = _1580._1244(F("回音持续"))) !== undefined)
								_429._2181 = _623;
							if ((_623 = _1580._1244(F("回音开始频率"))) !== undefined)
								_429._6332 = _623;
							if ((_623 = _1580._1244(F("回音结束频率"))) !== undefined)
								_429._6333 = _623;
							if ((_623 = _1580._1244(F("回音形状"))) !== undefined)
								_429._6334 = _623;
						}
						_1580._1253(_754);
					}
				}
				_1580._1255(F("技巧"));
			}
			_6750(this._655, F("声乐清擦"));
			if ((_623 = _1580._1254(F("声乐声带"))) !== undefined)
			{
				let _6759 = _1580._1266();
				for (let _657 = 0; _657 < _6759; _657++)
					_6750(this._662[_657], _657);
				_1580._1255(F("声乐声带"))
			}
			_6750(this._663, F("编曲修饰"));
			_6750(this._664, F("打节拍旋律"));
			_6750(this._665, F("打节拍鼓"));

			if (_6749)
			{
				let _1579;
				_1579 = _1141._1142(this);
				this._451(_1579);
			}
			return "";
			
		}
	}

}
class _6755
{
	_6760 = "";
	_6761 = 0;
	_1029()
	{
		this._6760 = "";
		this._6761 = 0;
	}
	_6756(_1573, _1578, _3229)
	{
		let _455;
		_455 = _1573[_1578];
		let _358;
		_358 = _455._1621;
		_358._1640 = _3229.replace(/-$/, '');
		_358._1643 = this._6761;
		_358._1644 = _1578;
		_358._2955 = false;
		this._6760 += _3229;
		this._6761++;
		if (!_581._1220(_3229, "-"))
		{
			_358._2955 = true;
			let _6760;
			_6760 = this._6760.replaceAll("-", "");
			for (let _6762 = 0; _6762 < this._6761; _6762++)
			{
				let _6763;
				_6763 = _1573[_1578 - _6762];
				let _5817;
				_5817 = _6763._1621;
				_5817._1642 = _6760;
			}
			this._6760 = "";
			this._6761 = 0;
		}
		return "";
	}
}

